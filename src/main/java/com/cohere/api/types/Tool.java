/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Tool.Builder.class)
public final class Tool {
    private final String name;

    private final String description;

    private final Optional<Map<String, ToolParameterDefinitionsValue>> parameterDefinitions;

    private final Map<String, Object> additionalProperties;

    private Tool(
            String name,
            String description,
            Optional<Map<String, ToolParameterDefinitionsValue>> parameterDefinitions,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.description = description;
        this.parameterDefinitions = parameterDefinitions;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the tool to be called. Valid names contain only the characters <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> and must not begin with a digit.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The description of what the tool does, the model uses the description to choose when and how to call the function.
     */
    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    /**
     * @return The input parameters of the tool. Accepts a dictionary where the key is the name of the parameter and the value is the parameter spec. Valid parameter names contain only the characters <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> and must not begin with a digit.
     * <pre><code>{
     *   &quot;my_param&quot;: {
     *     &quot;description&quot;: &lt;string&gt;,
     *     &quot;type&quot;: &lt;string&gt;, // any python data type, such as 'str', 'bool'
     *     &quot;required&quot;: &lt;boolean&gt;
     *   }
     * }
     * </code></pre>
     */
    @JsonProperty("parameter_definitions")
    public Optional<Map<String, ToolParameterDefinitionsValue>> getParameterDefinitions() {
        return parameterDefinitions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Tool && equalTo((Tool) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Tool other) {
        return name.equals(other.name)
                && description.equals(other.description)
                && parameterDefinitions.equals(other.parameterDefinitions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.description, this.parameterDefinitions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        DescriptionStage name(@NotNull String name);

        Builder from(Tool other);
    }

    public interface DescriptionStage {
        _FinalStage description(@NotNull String description);
    }

    public interface _FinalStage {
        Tool build();

        _FinalStage parameterDefinitions(Optional<Map<String, ToolParameterDefinitionsValue>> parameterDefinitions);

        _FinalStage parameterDefinitions(Map<String, ToolParameterDefinitionsValue> parameterDefinitions);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, DescriptionStage, _FinalStage {
        private String name;

        private String description;

        private Optional<Map<String, ToolParameterDefinitionsValue>> parameterDefinitions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Tool other) {
            name(other.getName());
            description(other.getDescription());
            parameterDefinitions(other.getParameterDefinitions());
            return this;
        }

        /**
         * <p>The name of the tool to be called. Valid names contain only the characters <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> and must not begin with a digit.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public DescriptionStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The description of what the tool does, the model uses the description to choose when and how to call the function.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("description")
        public _FinalStage description(@NotNull String description) {
            this.description = Objects.requireNonNull(description, "description must not be null");
            return this;
        }

        /**
         * <p>The input parameters of the tool. Accepts a dictionary where the key is the name of the parameter and the value is the parameter spec. Valid parameter names contain only the characters <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> and must not begin with a digit.</p>
         * <pre><code>{
         *   &quot;my_param&quot;: {
         *     &quot;description&quot;: &lt;string&gt;,
         *     &quot;type&quot;: &lt;string&gt;, // any python data type, such as 'str', 'bool'
         *     &quot;required&quot;: &lt;boolean&gt;
         *   }
         * }
         * </code></pre>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage parameterDefinitions(Map<String, ToolParameterDefinitionsValue> parameterDefinitions) {
            this.parameterDefinitions = Optional.ofNullable(parameterDefinitions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "parameter_definitions", nulls = Nulls.SKIP)
        public _FinalStage parameterDefinitions(
                Optional<Map<String, ToolParameterDefinitionsValue>> parameterDefinitions) {
            this.parameterDefinitions = parameterDefinitions;
            return this;
        }

        @java.lang.Override
        public Tool build() {
            return new Tool(name, description, parameterDefinitions, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ChatStreamEndEvent.Builder.class)
public final class ChatStreamEndEvent implements IChatStreamEvent {
    private final ChatStreamEndEventFinishReason finishReason;

    private final NonStreamedChatResponse response;

    private final Map<String, Object> additionalProperties;

    private ChatStreamEndEvent(
            ChatStreamEndEventFinishReason finishReason,
            NonStreamedChatResponse response,
            Map<String, Object> additionalProperties) {
        this.finishReason = finishReason;
        this.response = response;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return <ul>
     * <li><code>COMPLETE</code> - the model sent back a finished reply</li>
     * <li><code>ERROR_LIMIT</code> - the reply was cut off because the model reached the maximum number of tokens for its context length</li>
     * <li><code>MAX_TOKENS</code> - the reply was cut off because the model reached the maximum number of tokens specified by the max_tokens parameter</li>
     * <li><code>ERROR</code> - something went wrong when generating the reply</li>
     * <li><code>ERROR_TOXIC</code> - the model generated a reply that was deemed toxic</li>
     * </ul>
     */
    @JsonProperty("finish_reason")
    public ChatStreamEndEventFinishReason getFinishReason() {
        return finishReason;
    }

    /**
     * @return The consolidated response from the model. Contains the generated reply and all the other information streamed back in the previous events.
     */
    @JsonProperty("response")
    public NonStreamedChatResponse getResponse() {
        return response;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatStreamEndEvent && equalTo((ChatStreamEndEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatStreamEndEvent other) {
        return finishReason.equals(other.finishReason) && response.equals(other.response);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.finishReason, this.response);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FinishReasonStage builder() {
        return new Builder();
    }

    public interface FinishReasonStage {
        /**
         * <ul>
         * <li><code>COMPLETE</code> - the model sent back a finished reply</li>
         * <li><code>ERROR_LIMIT</code> - the reply was cut off because the model reached the maximum number of tokens for its context length</li>
         * <li><code>MAX_TOKENS</code> - the reply was cut off because the model reached the maximum number of tokens specified by the max_tokens parameter</li>
         * <li><code>ERROR</code> - something went wrong when generating the reply</li>
         * <li><code>ERROR_TOXIC</code> - the model generated a reply that was deemed toxic</li>
         * </ul>
         */
        ResponseStage finishReason(@NotNull ChatStreamEndEventFinishReason finishReason);

        Builder from(ChatStreamEndEvent other);
    }

    public interface ResponseStage {
        /**
         * <p>The consolidated response from the model. Contains the generated reply and all the other information streamed back in the previous events.</p>
         */
        _FinalStage response(@NotNull NonStreamedChatResponse response);
    }

    public interface _FinalStage {
        ChatStreamEndEvent build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FinishReasonStage, ResponseStage, _FinalStage {
        private ChatStreamEndEventFinishReason finishReason;

        private NonStreamedChatResponse response;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ChatStreamEndEvent other) {
            finishReason(other.getFinishReason());
            response(other.getResponse());
            return this;
        }

        /**
         * <ul>
         * <li><code>COMPLETE</code> - the model sent back a finished reply</li>
         * <li><code>ERROR_LIMIT</code> - the reply was cut off because the model reached the maximum number of tokens for its context length</li>
         * <li><code>MAX_TOKENS</code> - the reply was cut off because the model reached the maximum number of tokens specified by the max_tokens parameter</li>
         * <li><code>ERROR</code> - something went wrong when generating the reply</li>
         * <li><code>ERROR_TOXIC</code> - the model generated a reply that was deemed toxic</li>
         * </ul>
         * <ul>
         * <li><code>COMPLETE</code> - the model sent back a finished reply</li>
         * <li><code>ERROR_LIMIT</code> - the reply was cut off because the model reached the maximum number of tokens for its context length</li>
         * <li><code>MAX_TOKENS</code> - the reply was cut off because the model reached the maximum number of tokens specified by the max_tokens parameter</li>
         * <li><code>ERROR</code> - something went wrong when generating the reply</li>
         * <li><code>ERROR_TOXIC</code> - the model generated a reply that was deemed toxic</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("finish_reason")
        public ResponseStage finishReason(@NotNull ChatStreamEndEventFinishReason finishReason) {
            this.finishReason = Objects.requireNonNull(finishReason, "finishReason must not be null");
            return this;
        }

        /**
         * <p>The consolidated response from the model. Contains the generated reply and all the other information streamed back in the previous events.</p>
         * <p>The consolidated response from the model. Contains the generated reply and all the other information streamed back in the previous events.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("response")
        public _FinalStage response(@NotNull NonStreamedChatResponse response) {
            this.response = Objects.requireNonNull(response, "response must not be null");
            return this;
        }

        @java.lang.Override
        public ChatStreamEndEvent build() {
            return new ChatStreamEndEvent(finishReason, response, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ChatDataMetrics.Builder.class)
public final class ChatDataMetrics {
    private final Optional<Long> numTrainTurns;

    private final Optional<Long> numEvalTurns;

    private final Optional<String> preamble;

    private final Map<String, Object> additionalProperties;

    private ChatDataMetrics(
            Optional<Long> numTrainTurns,
            Optional<Long> numEvalTurns,
            Optional<String> preamble,
            Map<String, Object> additionalProperties) {
        this.numTrainTurns = numTrainTurns;
        this.numEvalTurns = numEvalTurns;
        this.preamble = preamble;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The sum of all turns of valid train examples.
     */
    @JsonProperty("num_train_turns")
    public Optional<Long> getNumTrainTurns() {
        return numTrainTurns;
    }

    /**
     * @return The sum of all turns of valid eval examples.
     */
    @JsonProperty("num_eval_turns")
    public Optional<Long> getNumEvalTurns() {
        return numEvalTurns;
    }

    /**
     * @return The preamble of this dataset.
     */
    @JsonProperty("preamble")
    public Optional<String> getPreamble() {
        return preamble;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatDataMetrics && equalTo((ChatDataMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatDataMetrics other) {
        return numTrainTurns.equals(other.numTrainTurns)
                && numEvalTurns.equals(other.numEvalTurns)
                && preamble.equals(other.preamble);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.numTrainTurns, this.numEvalTurns, this.preamble);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> numTrainTurns = Optional.empty();

        private Optional<Long> numEvalTurns = Optional.empty();

        private Optional<String> preamble = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ChatDataMetrics other) {
            numTrainTurns(other.getNumTrainTurns());
            numEvalTurns(other.getNumEvalTurns());
            preamble(other.getPreamble());
            return this;
        }

        @JsonSetter(value = "num_train_turns", nulls = Nulls.SKIP)
        public Builder numTrainTurns(Optional<Long> numTrainTurns) {
            this.numTrainTurns = numTrainTurns;
            return this;
        }

        public Builder numTrainTurns(Long numTrainTurns) {
            this.numTrainTurns = Optional.of(numTrainTurns);
            return this;
        }

        @JsonSetter(value = "num_eval_turns", nulls = Nulls.SKIP)
        public Builder numEvalTurns(Optional<Long> numEvalTurns) {
            this.numEvalTurns = numEvalTurns;
            return this;
        }

        public Builder numEvalTurns(Long numEvalTurns) {
            this.numEvalTurns = Optional.of(numEvalTurns);
            return this;
        }

        @JsonSetter(value = "preamble", nulls = Nulls.SKIP)
        public Builder preamble(Optional<String> preamble) {
            this.preamble = preamble;
            return this;
        }

        public Builder preamble(String preamble) {
            this.preamble = Optional.of(preamble);
            return this;
        }

        public ChatDataMetrics build() {
            return new ChatDataMetrics(numTrainTurns, numEvalTurns, preamble, additionalProperties);
        }
    }
}

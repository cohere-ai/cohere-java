/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ChatCitationGenerationEvent.Builder.class)
public final class ChatCitationGenerationEvent implements IChatStreamEvent {
    private final List<ChatCitation> citations;

    private final Map<String, Object> additionalProperties;

    private ChatCitationGenerationEvent(List<ChatCitation> citations, Map<String, Object> additionalProperties) {
        this.citations = citations;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Citations for the generated reply.
     */
    @JsonProperty("citations")
    public List<ChatCitation> getCitations() {
        return citations;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatCitationGenerationEvent && equalTo((ChatCitationGenerationEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatCitationGenerationEvent other) {
        return citations.equals(other.citations);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.citations);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<ChatCitation> citations = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ChatCitationGenerationEvent other) {
            citations(other.getCitations());
            return this;
        }

        /**
         * <p>Citations for the generated reply.</p>
         */
        @JsonSetter(value = "citations", nulls = Nulls.SKIP)
        public Builder citations(List<ChatCitation> citations) {
            this.citations.clear();
            this.citations.addAll(citations);
            return this;
        }

        public Builder addCitations(ChatCitation citations) {
            this.citations.add(citations);
            return this;
        }

        public Builder addAllCitations(List<ChatCitation> citations) {
            this.citations.addAll(citations);
            return this;
        }

        public ChatCitationGenerationEvent build() {
            return new ChatCitationGenerationEvent(citations, additionalProperties);
        }
    }
}

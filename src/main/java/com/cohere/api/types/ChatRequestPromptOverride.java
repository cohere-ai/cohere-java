/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ChatRequestPromptOverride.Builder.class)
public final class ChatRequestPromptOverride {
    private final Optional<Object> preamble;

    private final Optional<Object> taskDescription;

    private final Optional<Object> styleGuide;

    private final Map<String, Object> additionalProperties;

    private ChatRequestPromptOverride(
            Optional<Object> preamble,
            Optional<Object> taskDescription,
            Optional<Object> styleGuide,
            Map<String, Object> additionalProperties) {
        this.preamble = preamble;
        this.taskDescription = taskDescription;
        this.styleGuide = styleGuide;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("preamble")
    public Optional<Object> getPreamble() {
        return preamble;
    }

    @JsonProperty("task_description")
    public Optional<Object> getTaskDescription() {
        return taskDescription;
    }

    @JsonProperty("style_guide")
    public Optional<Object> getStyleGuide() {
        return styleGuide;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatRequestPromptOverride && equalTo((ChatRequestPromptOverride) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatRequestPromptOverride other) {
        return preamble.equals(other.preamble)
                && taskDescription.equals(other.taskDescription)
                && styleGuide.equals(other.styleGuide);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.preamble, this.taskDescription, this.styleGuide);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Object> preamble = Optional.empty();

        private Optional<Object> taskDescription = Optional.empty();

        private Optional<Object> styleGuide = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ChatRequestPromptOverride other) {
            preamble(other.getPreamble());
            taskDescription(other.getTaskDescription());
            styleGuide(other.getStyleGuide());
            return this;
        }

        @JsonSetter(value = "preamble", nulls = Nulls.SKIP)
        public Builder preamble(Optional<Object> preamble) {
            this.preamble = preamble;
            return this;
        }

        public Builder preamble(Object preamble) {
            this.preamble = Optional.of(preamble);
            return this;
        }

        @JsonSetter(value = "task_description", nulls = Nulls.SKIP)
        public Builder taskDescription(Optional<Object> taskDescription) {
            this.taskDescription = taskDescription;
            return this;
        }

        public Builder taskDescription(Object taskDescription) {
            this.taskDescription = Optional.of(taskDescription);
            return this;
        }

        @JsonSetter(value = "style_guide", nulls = Nulls.SKIP)
        public Builder styleGuide(Optional<Object> styleGuide) {
            this.styleGuide = styleGuide;
            return this;
        }

        public Builder styleGuide(Object styleGuide) {
            this.styleGuide = Optional.of(styleGuide);
            return this;
        }

        public ChatRequestPromptOverride build() {
            return new ChatRequestPromptOverride(preamble, taskDescription, styleGuide, additionalProperties);
        }
    }
}

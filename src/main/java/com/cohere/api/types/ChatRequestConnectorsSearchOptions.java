/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ChatRequestConnectorsSearchOptions.Builder.class)
public final class ChatRequestConnectorsSearchOptions {
    private final Optional<Object> model;

    private final Optional<Object> temperature;

    private final Optional<Object> maxTokens;

    private final Optional<Object> preamble;

    private final Optional<Double> seed;

    private final Map<String, Object> additionalProperties;

    private ChatRequestConnectorsSearchOptions(
            Optional<Object> model,
            Optional<Object> temperature,
            Optional<Object> maxTokens,
            Optional<Object> preamble,
            Optional<Double> seed,
            Map<String, Object> additionalProperties) {
        this.model = model;
        this.temperature = temperature;
        this.maxTokens = maxTokens;
        this.preamble = preamble;
        this.seed = seed;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("model")
    public Optional<Object> getModel() {
        return model;
    }

    @JsonProperty("temperature")
    public Optional<Object> getTemperature() {
        return temperature;
    }

    @JsonProperty("max_tokens")
    public Optional<Object> getMaxTokens() {
        return maxTokens;
    }

    @JsonProperty("preamble")
    public Optional<Object> getPreamble() {
        return preamble;
    }

    /**
     * @return If specified, the backend will make a best effort to sample tokens deterministically, such that repeated requests with the same seed and parameters should return the same result. However, determinsim cannot be totally guaranteed.
     */
    @JsonProperty("seed")
    public Optional<Double> getSeed() {
        return seed;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatRequestConnectorsSearchOptions
                && equalTo((ChatRequestConnectorsSearchOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatRequestConnectorsSearchOptions other) {
        return model.equals(other.model)
                && temperature.equals(other.temperature)
                && maxTokens.equals(other.maxTokens)
                && preamble.equals(other.preamble)
                && seed.equals(other.seed);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.model, this.temperature, this.maxTokens, this.preamble, this.seed);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Object> model = Optional.empty();

        private Optional<Object> temperature = Optional.empty();

        private Optional<Object> maxTokens = Optional.empty();

        private Optional<Object> preamble = Optional.empty();

        private Optional<Double> seed = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ChatRequestConnectorsSearchOptions other) {
            model(other.getModel());
            temperature(other.getTemperature());
            maxTokens(other.getMaxTokens());
            preamble(other.getPreamble());
            seed(other.getSeed());
            return this;
        }

        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public Builder model(Optional<Object> model) {
            this.model = model;
            return this;
        }

        public Builder model(Object model) {
            this.model = Optional.of(model);
            return this;
        }

        @JsonSetter(value = "temperature", nulls = Nulls.SKIP)
        public Builder temperature(Optional<Object> temperature) {
            this.temperature = temperature;
            return this;
        }

        public Builder temperature(Object temperature) {
            this.temperature = Optional.of(temperature);
            return this;
        }

        @JsonSetter(value = "max_tokens", nulls = Nulls.SKIP)
        public Builder maxTokens(Optional<Object> maxTokens) {
            this.maxTokens = maxTokens;
            return this;
        }

        public Builder maxTokens(Object maxTokens) {
            this.maxTokens = Optional.of(maxTokens);
            return this;
        }

        @JsonSetter(value = "preamble", nulls = Nulls.SKIP)
        public Builder preamble(Optional<Object> preamble) {
            this.preamble = preamble;
            return this;
        }

        public Builder preamble(Object preamble) {
            this.preamble = Optional.of(preamble);
            return this;
        }

        @JsonSetter(value = "seed", nulls = Nulls.SKIP)
        public Builder seed(Optional<Double> seed) {
            this.seed = seed;
            return this;
        }

        public Builder seed(Double seed) {
            this.seed = Optional.of(seed);
            return this;
        }

        public ChatRequestConnectorsSearchOptions build() {
            return new ChatRequestConnectorsSearchOptions(
                    model, temperature, maxTokens, preamble, seed, additionalProperties);
        }
    }
}

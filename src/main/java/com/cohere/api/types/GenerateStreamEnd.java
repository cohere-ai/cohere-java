/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = GenerateStreamEnd.Builder.class)
public final class GenerateStreamEnd implements IGenerateStreamEvent {
    private final boolean isFinished;

    private final Optional<FinishReason> finishReason;

    private final GenerateStreamEndResponse response;

    private final Map<String, Object> additionalProperties;

    private GenerateStreamEnd(
            boolean isFinished,
            Optional<FinishReason> finishReason,
            GenerateStreamEndResponse response,
            Map<String, Object> additionalProperties) {
        this.isFinished = isFinished;
        this.finishReason = finishReason;
        this.response = response;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("is_finished")
    public boolean getIsFinished() {
        return isFinished;
    }

    @JsonProperty("finish_reason")
    public Optional<FinishReason> getFinishReason() {
        return finishReason;
    }

    @JsonProperty("response")
    public GenerateStreamEndResponse getResponse() {
        return response;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GenerateStreamEnd && equalTo((GenerateStreamEnd) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GenerateStreamEnd other) {
        return isFinished == other.isFinished
                && finishReason.equals(other.finishReason)
                && response.equals(other.response);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.isFinished, this.finishReason, this.response);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IsFinishedStage builder() {
        return new Builder();
    }

    public interface IsFinishedStage {
        ResponseStage isFinished(boolean isFinished);

        Builder from(GenerateStreamEnd other);
    }

    public interface ResponseStage {
        _FinalStage response(GenerateStreamEndResponse response);
    }

    public interface _FinalStage {
        GenerateStreamEnd build();

        _FinalStage finishReason(Optional<FinishReason> finishReason);

        _FinalStage finishReason(FinishReason finishReason);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IsFinishedStage, ResponseStage, _FinalStage {
        private boolean isFinished;

        private GenerateStreamEndResponse response;

        private Optional<FinishReason> finishReason = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GenerateStreamEnd other) {
            isFinished(other.getIsFinished());
            finishReason(other.getFinishReason());
            response(other.getResponse());
            return this;
        }

        @java.lang.Override
        @JsonSetter("is_finished")
        public ResponseStage isFinished(boolean isFinished) {
            this.isFinished = isFinished;
            return this;
        }

        @java.lang.Override
        @JsonSetter("response")
        public _FinalStage response(GenerateStreamEndResponse response) {
            this.response = response;
            return this;
        }

        @java.lang.Override
        public _FinalStage finishReason(FinishReason finishReason) {
            this.finishReason = Optional.of(finishReason);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "finish_reason", nulls = Nulls.SKIP)
        public _FinalStage finishReason(Optional<FinishReason> finishReason) {
            this.finishReason = finishReason;
            return this;
        }

        @java.lang.Override
        public GenerateStreamEnd build() {
            return new GenerateStreamEnd(isFinished, finishReason, response, additionalProperties);
        }
    }
}

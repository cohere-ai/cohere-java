/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RerankerDataMetrics.Builder.class)
public final class RerankerDataMetrics {
    private final Optional<Long> numTrainQueries;

    private final Optional<Long> numTrainRelevantPassages;

    private final Optional<Long> numTrainHardNegatives;

    private final Optional<Long> numEvalQueries;

    private final Optional<Long> numEvalRelevantPassages;

    private final Optional<Long> numEvalHardNegatives;

    private final Map<String, Object> additionalProperties;

    private RerankerDataMetrics(
            Optional<Long> numTrainQueries,
            Optional<Long> numTrainRelevantPassages,
            Optional<Long> numTrainHardNegatives,
            Optional<Long> numEvalQueries,
            Optional<Long> numEvalRelevantPassages,
            Optional<Long> numEvalHardNegatives,
            Map<String, Object> additionalProperties) {
        this.numTrainQueries = numTrainQueries;
        this.numTrainRelevantPassages = numTrainRelevantPassages;
        this.numTrainHardNegatives = numTrainHardNegatives;
        this.numEvalQueries = numEvalQueries;
        this.numEvalRelevantPassages = numEvalRelevantPassages;
        this.numEvalHardNegatives = numEvalHardNegatives;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The number of training queries.
     */
    @JsonProperty("num_train_queries")
    public Optional<Long> getNumTrainQueries() {
        return numTrainQueries;
    }

    /**
     * @return The sum of all relevant passages of valid training examples.
     */
    @JsonProperty("num_train_relevant_passages")
    public Optional<Long> getNumTrainRelevantPassages() {
        return numTrainRelevantPassages;
    }

    /**
     * @return The sum of all hard negatives of valid training examples.
     */
    @JsonProperty("num_train_hard_negatives")
    public Optional<Long> getNumTrainHardNegatives() {
        return numTrainHardNegatives;
    }

    /**
     * @return The number of evaluation queries.
     */
    @JsonProperty("num_eval_queries")
    public Optional<Long> getNumEvalQueries() {
        return numEvalQueries;
    }

    /**
     * @return The sum of all relevant passages of valid eval examples.
     */
    @JsonProperty("num_eval_relevant_passages")
    public Optional<Long> getNumEvalRelevantPassages() {
        return numEvalRelevantPassages;
    }

    /**
     * @return The sum of all hard negatives of valid eval examples.
     */
    @JsonProperty("num_eval_hard_negatives")
    public Optional<Long> getNumEvalHardNegatives() {
        return numEvalHardNegatives;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RerankerDataMetrics && equalTo((RerankerDataMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RerankerDataMetrics other) {
        return numTrainQueries.equals(other.numTrainQueries)
                && numTrainRelevantPassages.equals(other.numTrainRelevantPassages)
                && numTrainHardNegatives.equals(other.numTrainHardNegatives)
                && numEvalQueries.equals(other.numEvalQueries)
                && numEvalRelevantPassages.equals(other.numEvalRelevantPassages)
                && numEvalHardNegatives.equals(other.numEvalHardNegatives);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.numTrainQueries,
                this.numTrainRelevantPassages,
                this.numTrainHardNegatives,
                this.numEvalQueries,
                this.numEvalRelevantPassages,
                this.numEvalHardNegatives);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> numTrainQueries = Optional.empty();

        private Optional<Long> numTrainRelevantPassages = Optional.empty();

        private Optional<Long> numTrainHardNegatives = Optional.empty();

        private Optional<Long> numEvalQueries = Optional.empty();

        private Optional<Long> numEvalRelevantPassages = Optional.empty();

        private Optional<Long> numEvalHardNegatives = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RerankerDataMetrics other) {
            numTrainQueries(other.getNumTrainQueries());
            numTrainRelevantPassages(other.getNumTrainRelevantPassages());
            numTrainHardNegatives(other.getNumTrainHardNegatives());
            numEvalQueries(other.getNumEvalQueries());
            numEvalRelevantPassages(other.getNumEvalRelevantPassages());
            numEvalHardNegatives(other.getNumEvalHardNegatives());
            return this;
        }

        /**
         * <p>The number of training queries.</p>
         */
        @JsonSetter(value = "num_train_queries", nulls = Nulls.SKIP)
        public Builder numTrainQueries(Optional<Long> numTrainQueries) {
            this.numTrainQueries = numTrainQueries;
            return this;
        }

        public Builder numTrainQueries(Long numTrainQueries) {
            this.numTrainQueries = Optional.ofNullable(numTrainQueries);
            return this;
        }

        /**
         * <p>The sum of all relevant passages of valid training examples.</p>
         */
        @JsonSetter(value = "num_train_relevant_passages", nulls = Nulls.SKIP)
        public Builder numTrainRelevantPassages(Optional<Long> numTrainRelevantPassages) {
            this.numTrainRelevantPassages = numTrainRelevantPassages;
            return this;
        }

        public Builder numTrainRelevantPassages(Long numTrainRelevantPassages) {
            this.numTrainRelevantPassages = Optional.ofNullable(numTrainRelevantPassages);
            return this;
        }

        /**
         * <p>The sum of all hard negatives of valid training examples.</p>
         */
        @JsonSetter(value = "num_train_hard_negatives", nulls = Nulls.SKIP)
        public Builder numTrainHardNegatives(Optional<Long> numTrainHardNegatives) {
            this.numTrainHardNegatives = numTrainHardNegatives;
            return this;
        }

        public Builder numTrainHardNegatives(Long numTrainHardNegatives) {
            this.numTrainHardNegatives = Optional.ofNullable(numTrainHardNegatives);
            return this;
        }

        /**
         * <p>The number of evaluation queries.</p>
         */
        @JsonSetter(value = "num_eval_queries", nulls = Nulls.SKIP)
        public Builder numEvalQueries(Optional<Long> numEvalQueries) {
            this.numEvalQueries = numEvalQueries;
            return this;
        }

        public Builder numEvalQueries(Long numEvalQueries) {
            this.numEvalQueries = Optional.ofNullable(numEvalQueries);
            return this;
        }

        /**
         * <p>The sum of all relevant passages of valid eval examples.</p>
         */
        @JsonSetter(value = "num_eval_relevant_passages", nulls = Nulls.SKIP)
        public Builder numEvalRelevantPassages(Optional<Long> numEvalRelevantPassages) {
            this.numEvalRelevantPassages = numEvalRelevantPassages;
            return this;
        }

        public Builder numEvalRelevantPassages(Long numEvalRelevantPassages) {
            this.numEvalRelevantPassages = Optional.ofNullable(numEvalRelevantPassages);
            return this;
        }

        /**
         * <p>The sum of all hard negatives of valid eval examples.</p>
         */
        @JsonSetter(value = "num_eval_hard_negatives", nulls = Nulls.SKIP)
        public Builder numEvalHardNegatives(Optional<Long> numEvalHardNegatives) {
            this.numEvalHardNegatives = numEvalHardNegatives;
            return this;
        }

        public Builder numEvalHardNegatives(Long numEvalHardNegatives) {
            this.numEvalHardNegatives = Optional.ofNullable(numEvalHardNegatives);
            return this;
        }

        public RerankerDataMetrics build() {
            return new RerankerDataMetrics(
                    numTrainQueries,
                    numTrainRelevantPassages,
                    numTrainHardNegatives,
                    numEvalQueries,
                    numEvalRelevantPassages,
                    numEvalHardNegatives,
                    additionalProperties);
        }
    }
}

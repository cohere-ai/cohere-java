/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolCall.Builder.class)
public final class ToolCall {
    private final String name;

    private final Map<String, Object> parameters;

    private final Map<String, Object> additionalProperties;

    private ToolCall(String name, Map<String, Object> parameters, Map<String, Object> additionalProperties) {
        this.name = name;
        this.parameters = parameters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Name of the tool to call.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The name and value of the parameters to use when invoking a tool.
     */
    @JsonProperty("parameters")
    public Map<String, Object> getParameters() {
        return parameters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolCall && equalTo((ToolCall) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolCall other) {
        return name.equals(other.name) && parameters.equals(other.parameters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.parameters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(ToolCall other);
    }

    public interface _FinalStage {
        ToolCall build();

        _FinalStage parameters(Map<String, Object> parameters);

        _FinalStage putAllParameters(Map<String, Object> parameters);

        _FinalStage parameters(String key, Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Map<String, Object> parameters = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ToolCall other) {
            name(other.getName());
            parameters(other.getParameters());
            return this;
        }

        /**
         * <p>Name of the tool to call.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The name and value of the parameters to use when invoking a tool.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage parameters(String key, Object value) {
            this.parameters.put(key, value);
            return this;
        }

        /**
         * <p>The name and value of the parameters to use when invoking a tool.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllParameters(Map<String, Object> parameters) {
            this.parameters.putAll(parameters);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "parameters", nulls = Nulls.SKIP)
        public _FinalStage parameters(Map<String, Object> parameters) {
            this.parameters.clear();
            this.parameters.putAll(parameters);
            return this;
        }

        @java.lang.Override
        public ToolCall build() {
            return new ToolCall(name, parameters, additionalProperties);
        }
    }
}

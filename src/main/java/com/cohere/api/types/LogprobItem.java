/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LogprobItem.Builder.class)
public final class LogprobItem {
    private final Optional<String> text;

    private final List<Integer> tokenIds;

    private final Optional<List<Float>> logprobs;

    private final Map<String, Object> additionalProperties;

    private LogprobItem(
            Optional<String> text,
            List<Integer> tokenIds,
            Optional<List<Float>> logprobs,
            Map<String, Object> additionalProperties) {
        this.text = text;
        this.tokenIds = tokenIds;
        this.logprobs = logprobs;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The text chunk for which the log probabilities was calculated.
     */
    @JsonProperty("text")
    public Optional<String> getText() {
        return text;
    }

    /**
     * @return The token ids of each token used to construct the text chunk.
     */
    @JsonProperty("token_ids")
    public List<Integer> getTokenIds() {
        return tokenIds;
    }

    /**
     * @return The log probability of each token used to construct the text chunk.
     */
    @JsonProperty("logprobs")
    public Optional<List<Float>> getLogprobs() {
        return logprobs;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LogprobItem && equalTo((LogprobItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LogprobItem other) {
        return text.equals(other.text) && tokenIds.equals(other.tokenIds) && logprobs.equals(other.logprobs);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.text, this.tokenIds, this.logprobs);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> text = Optional.empty();

        private List<Integer> tokenIds = new ArrayList<>();

        private Optional<List<Float>> logprobs = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LogprobItem other) {
            text(other.getText());
            tokenIds(other.getTokenIds());
            logprobs(other.getLogprobs());
            return this;
        }

        /**
         * <p>The text chunk for which the log probabilities was calculated.</p>
         */
        @JsonSetter(value = "text", nulls = Nulls.SKIP)
        public Builder text(Optional<String> text) {
            this.text = text;
            return this;
        }

        public Builder text(String text) {
            this.text = Optional.ofNullable(text);
            return this;
        }

        /**
         * <p>The token ids of each token used to construct the text chunk.</p>
         */
        @JsonSetter(value = "token_ids", nulls = Nulls.SKIP)
        public Builder tokenIds(List<Integer> tokenIds) {
            this.tokenIds.clear();
            this.tokenIds.addAll(tokenIds);
            return this;
        }

        public Builder addTokenIds(Integer tokenIds) {
            this.tokenIds.add(tokenIds);
            return this;
        }

        public Builder addAllTokenIds(List<Integer> tokenIds) {
            this.tokenIds.addAll(tokenIds);
            return this;
        }

        /**
         * <p>The log probability of each token used to construct the text chunk.</p>
         */
        @JsonSetter(value = "logprobs", nulls = Nulls.SKIP)
        public Builder logprobs(Optional<List<Float>> logprobs) {
            this.logprobs = logprobs;
            return this;
        }

        public Builder logprobs(List<Float> logprobs) {
            this.logprobs = Optional.ofNullable(logprobs);
            return this;
        }

        public LogprobItem build() {
            return new LogprobItem(text, tokenIds, logprobs, additionalProperties);
        }
    }
}

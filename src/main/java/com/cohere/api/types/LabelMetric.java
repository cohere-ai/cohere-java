/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LabelMetric.Builder.class)
public final class LabelMetric {
    private final Optional<Long> totalExamples;

    private final Optional<String> label;

    private final Optional<List<String>> samples;

    private final Map<String, Object> additionalProperties;

    private LabelMetric(
            Optional<Long> totalExamples,
            Optional<String> label,
            Optional<List<String>> samples,
            Map<String, Object> additionalProperties) {
        this.totalExamples = totalExamples;
        this.label = label;
        this.samples = samples;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Total number of examples for this label
     */
    @JsonProperty("total_examples")
    public Optional<Long> getTotalExamples() {
        return totalExamples;
    }

    /**
     * @return value of the label
     */
    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    /**
     * @return samples for this label
     */
    @JsonProperty("samples")
    public Optional<List<String>> getSamples() {
        return samples;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LabelMetric && equalTo((LabelMetric) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LabelMetric other) {
        return totalExamples.equals(other.totalExamples) && label.equals(other.label) && samples.equals(other.samples);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.totalExamples, this.label, this.samples);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> totalExamples = Optional.empty();

        private Optional<String> label = Optional.empty();

        private Optional<List<String>> samples = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LabelMetric other) {
            totalExamples(other.getTotalExamples());
            label(other.getLabel());
            samples(other.getSamples());
            return this;
        }

        /**
         * <p>Total number of examples for this label</p>
         */
        @JsonSetter(value = "total_examples", nulls = Nulls.SKIP)
        public Builder totalExamples(Optional<Long> totalExamples) {
            this.totalExamples = totalExamples;
            return this;
        }

        public Builder totalExamples(Long totalExamples) {
            this.totalExamples = Optional.ofNullable(totalExamples);
            return this;
        }

        /**
         * <p>value of the label</p>
         */
        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public Builder label(Optional<String> label) {
            this.label = label;
            return this;
        }

        public Builder label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        /**
         * <p>samples for this label</p>
         */
        @JsonSetter(value = "samples", nulls = Nulls.SKIP)
        public Builder samples(Optional<List<String>> samples) {
            this.samples = samples;
            return this;
        }

        public Builder samples(List<String> samples) {
            this.samples = Optional.ofNullable(samples);
            return this;
        }

        public LabelMetric build() {
            return new LabelMetric(totalExamples, label, samples, additionalProperties);
        }
    }
}

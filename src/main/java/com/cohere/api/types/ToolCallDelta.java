/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolCallDelta.Builder.class)
public final class ToolCallDelta {
    private final Optional<String> name;

    private final Optional<Double> index;

    private final Optional<String> parameters;

    private final Optional<String> text;

    private final Map<String, Object> additionalProperties;

    private ToolCallDelta(
            Optional<String> name,
            Optional<Double> index,
            Optional<String> parameters,
            Optional<String> text,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.index = index;
        this.parameters = parameters;
        this.text = text;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Name of the tool call
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return Index of the tool call generated
     */
    @JsonProperty("index")
    public Optional<Double> getIndex() {
        return index;
    }

    /**
     * @return Chunk of the tool parameters
     */
    @JsonProperty("parameters")
    public Optional<String> getParameters() {
        return parameters;
    }

    /**
     * @return Chunk of the tool plan text
     */
    @JsonProperty("text")
    public Optional<String> getText() {
        return text;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolCallDelta && equalTo((ToolCallDelta) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolCallDelta other) {
        return name.equals(other.name)
                && index.equals(other.index)
                && parameters.equals(other.parameters)
                && text.equals(other.text);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.index, this.parameters, this.text);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<Double> index = Optional.empty();

        private Optional<String> parameters = Optional.empty();

        private Optional<String> text = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ToolCallDelta other) {
            name(other.getName());
            index(other.getIndex());
            parameters(other.getParameters());
            text(other.getText());
            return this;
        }

        /**
         * <p>Name of the tool call</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>Index of the tool call generated</p>
         */
        @JsonSetter(value = "index", nulls = Nulls.SKIP)
        public Builder index(Optional<Double> index) {
            this.index = index;
            return this;
        }

        public Builder index(Double index) {
            this.index = Optional.ofNullable(index);
            return this;
        }

        /**
         * <p>Chunk of the tool parameters</p>
         */
        @JsonSetter(value = "parameters", nulls = Nulls.SKIP)
        public Builder parameters(Optional<String> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(String parameters) {
            this.parameters = Optional.ofNullable(parameters);
            return this;
        }

        /**
         * <p>Chunk of the tool plan text</p>
         */
        @JsonSetter(value = "text", nulls = Nulls.SKIP)
        public Builder text(Optional<String> text) {
            this.text = text;
            return this;
        }

        public Builder text(String text) {
            this.text = Optional.ofNullable(text);
            return this;
        }

        public ToolCallDelta build() {
            return new ToolCallDelta(name, index, parameters, text, additionalProperties);
        }
    }
}

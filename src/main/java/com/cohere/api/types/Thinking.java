/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Thinking.Builder.class)
public final class Thinking {
    private final ThinkingType type;

    private final Optional<Integer> tokenBudget;

    private final Map<String, Object> additionalProperties;

    private Thinking(ThinkingType type, Optional<Integer> tokenBudget, Map<String, Object> additionalProperties) {
        this.type = type;
        this.tokenBudget = tokenBudget;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public ThinkingType getType() {
        return type;
    }

    /**
     * @return The maximum number of tokens the model can use for thinking, which must be set to a positive integer.
     * The model will stop thinking if it reaches the thinking token budget and will proceed with the response.
     */
    @JsonProperty("token_budget")
    public Optional<Integer> getTokenBudget() {
        return tokenBudget;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Thinking && equalTo((Thinking) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Thinking other) {
        return type.equals(other.type) && tokenBudget.equals(other.tokenBudget);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.tokenBudget);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        _FinalStage type(@NotNull ThinkingType type);

        Builder from(Thinking other);
    }

    public interface _FinalStage {
        Thinking build();

        _FinalStage tokenBudget(Optional<Integer> tokenBudget);

        _FinalStage tokenBudget(Integer tokenBudget);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private ThinkingType type;

        private Optional<Integer> tokenBudget = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Thinking other) {
            type(other.getType());
            tokenBudget(other.getTokenBudget());
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull ThinkingType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The maximum number of tokens the model can use for thinking, which must be set to a positive integer.
         * The model will stop thinking if it reaches the thinking token budget and will proceed with the response.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tokenBudget(Integer tokenBudget) {
            this.tokenBudget = Optional.ofNullable(tokenBudget);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "token_budget", nulls = Nulls.SKIP)
        public _FinalStage tokenBudget(Optional<Integer> tokenBudget) {
            this.tokenBudget = tokenBudget;
            return this;
        }

        @java.lang.Override
        public Thinking build() {
            return new Thinking(type, tokenBudget, additionalProperties);
        }
    }
}

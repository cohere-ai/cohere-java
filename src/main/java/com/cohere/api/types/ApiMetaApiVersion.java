/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApiMetaApiVersion.Builder.class)
public final class ApiMetaApiVersion {
    private final String version;

    private final Optional<Boolean> isDeprecated;

    private final Optional<Boolean> isExperimental;

    private final Map<String, Object> additionalProperties;

    private ApiMetaApiVersion(
            String version,
            Optional<Boolean> isDeprecated,
            Optional<Boolean> isExperimental,
            Map<String, Object> additionalProperties) {
        this.version = version;
        this.isDeprecated = isDeprecated;
        this.isExperimental = isExperimental;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("version")
    public String getVersion() {
        return version;
    }

    @JsonProperty("is_deprecated")
    public Optional<Boolean> getIsDeprecated() {
        return isDeprecated;
    }

    @JsonProperty("is_experimental")
    public Optional<Boolean> getIsExperimental() {
        return isExperimental;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApiMetaApiVersion && equalTo((ApiMetaApiVersion) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApiMetaApiVersion other) {
        return version.equals(other.version)
                && isDeprecated.equals(other.isDeprecated)
                && isExperimental.equals(other.isExperimental);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.version, this.isDeprecated, this.isExperimental);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static VersionStage builder() {
        return new Builder();
    }

    public interface VersionStage {
        _FinalStage version(@NotNull String version);

        Builder from(ApiMetaApiVersion other);
    }

    public interface _FinalStage {
        ApiMetaApiVersion build();

        _FinalStage isDeprecated(Optional<Boolean> isDeprecated);

        _FinalStage isDeprecated(Boolean isDeprecated);

        _FinalStage isExperimental(Optional<Boolean> isExperimental);

        _FinalStage isExperimental(Boolean isExperimental);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements VersionStage, _FinalStage {
        private String version;

        private Optional<Boolean> isExperimental = Optional.empty();

        private Optional<Boolean> isDeprecated = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ApiMetaApiVersion other) {
            version(other.getVersion());
            isDeprecated(other.getIsDeprecated());
            isExperimental(other.getIsExperimental());
            return this;
        }

        @java.lang.Override
        @JsonSetter("version")
        public _FinalStage version(@NotNull String version) {
            this.version = Objects.requireNonNull(version, "version must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage isExperimental(Boolean isExperimental) {
            this.isExperimental = Optional.ofNullable(isExperimental);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_experimental", nulls = Nulls.SKIP)
        public _FinalStage isExperimental(Optional<Boolean> isExperimental) {
            this.isExperimental = isExperimental;
            return this;
        }

        @java.lang.Override
        public _FinalStage isDeprecated(Boolean isDeprecated) {
            this.isDeprecated = Optional.ofNullable(isDeprecated);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_deprecated", nulls = Nulls.SKIP)
        public _FinalStage isDeprecated(Optional<Boolean> isDeprecated) {
            this.isDeprecated = isDeprecated;
            return this;
        }

        @java.lang.Override
        public ApiMetaApiVersion build() {
            return new ApiMetaApiVersion(version, isDeprecated, isExperimental, additionalProperties);
        }
    }
}

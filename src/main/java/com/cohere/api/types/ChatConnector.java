/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ChatConnector.Builder.class)
public final class ChatConnector {
    private final String id;

    private final Optional<String> userAccessToken;

    private final Optional<Boolean> continueOnFailure;

    private final Optional<Map<String, Object>> options;

    private final Map<String, Object> additionalProperties;

    private ChatConnector(
            String id,
            Optional<String> userAccessToken,
            Optional<Boolean> continueOnFailure,
            Optional<Map<String, Object>> options,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.userAccessToken = userAccessToken;
        this.continueOnFailure = continueOnFailure;
        this.options = options;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The identifier of the connector.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return When specified, this user access token will be passed to the connector in the Authorization header instead of the Cohere generated one.
     */
    @JsonProperty("user_access_token")
    public Optional<String> getUserAccessToken() {
        return userAccessToken;
    }

    /**
     * @return Defaults to <code>false</code>.
     * <p>When <code>true</code>, the request will continue if this connector returned an error.</p>
     */
    @JsonProperty("continue_on_failure")
    public Optional<Boolean> getContinueOnFailure() {
        return continueOnFailure;
    }

    /**
     * @return Provides the connector with different settings at request time. The key/value pairs of this object are specific to each connector.
     * <p>For example, the connector <code>web-search</code> supports the <code>site</code> option, which limits search results to the specified domain.</p>
     */
    @JsonProperty("options")
    public Optional<Map<String, Object>> getOptions() {
        return options;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatConnector && equalTo((ChatConnector) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatConnector other) {
        return id.equals(other.id)
                && userAccessToken.equals(other.userAccessToken)
                && continueOnFailure.equals(other.continueOnFailure)
                && options.equals(other.options);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.userAccessToken, this.continueOnFailure, this.options);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The identifier of the connector.</p>
         */
        _FinalStage id(@NotNull String id);

        Builder from(ChatConnector other);
    }

    public interface _FinalStage {
        ChatConnector build();

        /**
         * <p>When specified, this user access token will be passed to the connector in the Authorization header instead of the Cohere generated one.</p>
         */
        _FinalStage userAccessToken(Optional<String> userAccessToken);

        _FinalStage userAccessToken(String userAccessToken);

        /**
         * <p>Defaults to <code>false</code>.</p>
         * <p>When <code>true</code>, the request will continue if this connector returned an error.</p>
         */
        _FinalStage continueOnFailure(Optional<Boolean> continueOnFailure);

        _FinalStage continueOnFailure(Boolean continueOnFailure);

        /**
         * <p>Provides the connector with different settings at request time. The key/value pairs of this object are specific to each connector.</p>
         * <p>For example, the connector <code>web-search</code> supports the <code>site</code> option, which limits search results to the specified domain.</p>
         */
        _FinalStage options(Optional<Map<String, Object>> options);

        _FinalStage options(Map<String, Object> options);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, _FinalStage {
        private String id;

        private Optional<Map<String, Object>> options = Optional.empty();

        private Optional<Boolean> continueOnFailure = Optional.empty();

        private Optional<String> userAccessToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ChatConnector other) {
            id(other.getId());
            userAccessToken(other.getUserAccessToken());
            continueOnFailure(other.getContinueOnFailure());
            options(other.getOptions());
            return this;
        }

        /**
         * <p>The identifier of the connector.</p>
         * <p>The identifier of the connector.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public _FinalStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Provides the connector with different settings at request time. The key/value pairs of this object are specific to each connector.</p>
         * <p>For example, the connector <code>web-search</code> supports the <code>site</code> option, which limits search results to the specified domain.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage options(Map<String, Object> options) {
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * <p>Provides the connector with different settings at request time. The key/value pairs of this object are specific to each connector.</p>
         * <p>For example, the connector <code>web-search</code> supports the <code>site</code> option, which limits search results to the specified domain.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "options", nulls = Nulls.SKIP)
        public _FinalStage options(Optional<Map<String, Object>> options) {
            this.options = options;
            return this;
        }

        /**
         * <p>Defaults to <code>false</code>.</p>
         * <p>When <code>true</code>, the request will continue if this connector returned an error.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage continueOnFailure(Boolean continueOnFailure) {
            this.continueOnFailure = Optional.ofNullable(continueOnFailure);
            return this;
        }

        /**
         * <p>Defaults to <code>false</code>.</p>
         * <p>When <code>true</code>, the request will continue if this connector returned an error.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "continue_on_failure", nulls = Nulls.SKIP)
        public _FinalStage continueOnFailure(Optional<Boolean> continueOnFailure) {
            this.continueOnFailure = continueOnFailure;
            return this;
        }

        /**
         * <p>When specified, this user access token will be passed to the connector in the Authorization header instead of the Cohere generated one.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage userAccessToken(String userAccessToken) {
            this.userAccessToken = Optional.ofNullable(userAccessToken);
            return this;
        }

        /**
         * <p>When specified, this user access token will be passed to the connector in the Authorization header instead of the Cohere generated one.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "user_access_token", nulls = Nulls.SKIP)
        public _FinalStage userAccessToken(Optional<String> userAccessToken) {
            this.userAccessToken = userAccessToken;
            return this;
        }

        @java.lang.Override
        public ChatConnector build() {
            return new ChatConnector(id, userAccessToken, continueOnFailure, options, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RerankResponse.Builder.class)
public final class RerankResponse {
    private final Optional<String> id;

    private final List<RerankResponseResultsItem> results;

    private final Optional<ApiMeta> meta;

    private final Map<String, Object> additionalProperties;

    private RerankResponse(
            Optional<String> id,
            List<RerankResponseResultsItem> results,
            Optional<ApiMeta> meta,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.results = results;
        this.meta = meta;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return An ordered list of ranked documents
     */
    @JsonProperty("results")
    public List<RerankResponseResultsItem> getResults() {
        return results;
    }

    @JsonProperty("meta")
    public Optional<ApiMeta> getMeta() {
        return meta;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RerankResponse && equalTo((RerankResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RerankResponse other) {
        return id.equals(other.id) && results.equals(other.results) && meta.equals(other.meta);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.results, this.meta);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private List<RerankResponseResultsItem> results = new ArrayList<>();

        private Optional<ApiMeta> meta = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RerankResponse other) {
            id(other.getId());
            results(other.getResults());
            meta(other.getMeta());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "results", nulls = Nulls.SKIP)
        public Builder results(List<RerankResponseResultsItem> results) {
            this.results.clear();
            this.results.addAll(results);
            return this;
        }

        public Builder addResults(RerankResponseResultsItem results) {
            this.results.add(results);
            return this;
        }

        public Builder addAllResults(List<RerankResponseResultsItem> results) {
            this.results.addAll(results);
            return this;
        }

        @JsonSetter(value = "meta", nulls = Nulls.SKIP)
        public Builder meta(Optional<ApiMeta> meta) {
            this.meta = meta;
            return this;
        }

        public Builder meta(ApiMeta meta) {
            this.meta = Optional.ofNullable(meta);
            return this;
        }

        public RerankResponse build() {
            return new RerankResponse(id, results, meta, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ChatSearchResultsEvent.Builder.class)
public final class ChatSearchResultsEvent implements IChatStreamEvent {
    private final List<ChatSearchResult> searchResults;

    private final List<Map<String, String>> documents;

    private final Map<String, Object> additionalProperties;

    private ChatSearchResultsEvent(
            List<ChatSearchResult> searchResults,
            List<Map<String, String>> documents,
            Map<String, Object> additionalProperties) {
        this.searchResults = searchResults;
        this.documents = documents;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Conducted searches and the ids of documents retrieved from each of them.
     */
    @JsonProperty("search_results")
    public List<ChatSearchResult> getSearchResults() {
        return searchResults;
    }

    /**
     * @return Documents fetched from searches or provided by the user.
     */
    @JsonProperty("documents")
    public List<Map<String, String>> getDocuments() {
        return documents;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatSearchResultsEvent && equalTo((ChatSearchResultsEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatSearchResultsEvent other) {
        return searchResults.equals(other.searchResults) && documents.equals(other.documents);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.searchResults, this.documents);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<ChatSearchResult> searchResults = new ArrayList<>();

        private List<Map<String, String>> documents = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ChatSearchResultsEvent other) {
            searchResults(other.getSearchResults());
            documents(other.getDocuments());
            return this;
        }

        @JsonSetter(value = "search_results", nulls = Nulls.SKIP)
        public Builder searchResults(List<ChatSearchResult> searchResults) {
            this.searchResults.clear();
            this.searchResults.addAll(searchResults);
            return this;
        }

        public Builder addSearchResults(ChatSearchResult searchResults) {
            this.searchResults.add(searchResults);
            return this;
        }

        public Builder addAllSearchResults(List<ChatSearchResult> searchResults) {
            this.searchResults.addAll(searchResults);
            return this;
        }

        @JsonSetter(value = "documents", nulls = Nulls.SKIP)
        public Builder documents(List<Map<String, String>> documents) {
            this.documents.clear();
            this.documents.addAll(documents);
            return this;
        }

        public Builder addDocuments(Map<String, String> documents) {
            this.documents.add(documents);
            return this;
        }

        public Builder addAllDocuments(List<Map<String, String>> documents) {
            this.documents.addAll(documents);
            return this;
        }

        public ChatSearchResultsEvent build() {
            return new ChatSearchResultsEvent(searchResults, documents, additionalProperties);
        }
    }
}

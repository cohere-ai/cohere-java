/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class StreamedChatResponse {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private StreamedChatResponse(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static StreamedChatResponse streamStart(ChatStreamStartEvent value) {
        return new StreamedChatResponse(new StreamStartValue(value));
    }

    public static StreamedChatResponse searchQueriesGeneration(ChatSearchQueriesGenerationEvent value) {
        return new StreamedChatResponse(new SearchQueriesGenerationValue(value));
    }

    public static StreamedChatResponse searchResults(ChatSearchResultsEvent value) {
        return new StreamedChatResponse(new SearchResultsValue(value));
    }

    public static StreamedChatResponse textGeneration(ChatTextGenerationEvent value) {
        return new StreamedChatResponse(new TextGenerationValue(value));
    }

    public static StreamedChatResponse citationGeneration(ChatCitationGenerationEvent value) {
        return new StreamedChatResponse(new CitationGenerationValue(value));
    }

    public static StreamedChatResponse streamEnd(ChatStreamEndEvent value) {
        return new StreamedChatResponse(new StreamEndValue(value));
    }

    public boolean isStreamStart() {
        return value instanceof StreamStartValue;
    }

    public boolean isSearchQueriesGeneration() {
        return value instanceof SearchQueriesGenerationValue;
    }

    public boolean isSearchResults() {
        return value instanceof SearchResultsValue;
    }

    public boolean isTextGeneration() {
        return value instanceof TextGenerationValue;
    }

    public boolean isCitationGeneration() {
        return value instanceof CitationGenerationValue;
    }

    public boolean isStreamEnd() {
        return value instanceof StreamEndValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<ChatStreamStartEvent> getStreamStart() {
        if (isStreamStart()) {
            return Optional.of(((StreamStartValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ChatSearchQueriesGenerationEvent> getSearchQueriesGeneration() {
        if (isSearchQueriesGeneration()) {
            return Optional.of(((SearchQueriesGenerationValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ChatSearchResultsEvent> getSearchResults() {
        if (isSearchResults()) {
            return Optional.of(((SearchResultsValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ChatTextGenerationEvent> getTextGeneration() {
        if (isTextGeneration()) {
            return Optional.of(((TextGenerationValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ChatCitationGenerationEvent> getCitationGeneration() {
        if (isCitationGeneration()) {
            return Optional.of(((CitationGenerationValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ChatStreamEndEvent> getStreamEnd() {
        if (isStreamEnd()) {
            return Optional.of(((StreamEndValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitStreamStart(ChatStreamStartEvent streamStart);

        T visitSearchQueriesGeneration(ChatSearchQueriesGenerationEvent searchQueriesGeneration);

        T visitSearchResults(ChatSearchResultsEvent searchResults);

        T visitTextGeneration(ChatTextGenerationEvent textGeneration);

        T visitCitationGeneration(ChatCitationGenerationEvent citationGeneration);

        T visitStreamEnd(ChatStreamEndEvent streamEnd);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(
            use = JsonTypeInfo.Id.NAME,
            property = "event_type",
            visible = true,
            defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(StreamStartValue.class),
        @JsonSubTypes.Type(SearchQueriesGenerationValue.class),
        @JsonSubTypes.Type(SearchResultsValue.class),
        @JsonSubTypes.Type(TextGenerationValue.class),
        @JsonSubTypes.Type(CitationGenerationValue.class),
        @JsonSubTypes.Type(StreamEndValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("stream-start")
    private static final class StreamStartValue implements Value {
        @JsonUnwrapped
        private ChatStreamStartEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private StreamStartValue() {}

        private StreamStartValue(ChatStreamStartEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitStreamStart(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof StreamStartValue && equalTo((StreamStartValue) other);
        }

        private boolean equalTo(StreamStartValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "StreamedChatResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("search-queries-generation")
    private static final class SearchQueriesGenerationValue implements Value {
        @JsonUnwrapped
        private ChatSearchQueriesGenerationEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SearchQueriesGenerationValue() {}

        private SearchQueriesGenerationValue(ChatSearchQueriesGenerationEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSearchQueriesGeneration(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SearchQueriesGenerationValue && equalTo((SearchQueriesGenerationValue) other);
        }

        private boolean equalTo(SearchQueriesGenerationValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "StreamedChatResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("search-results")
    private static final class SearchResultsValue implements Value {
        @JsonUnwrapped
        private ChatSearchResultsEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SearchResultsValue() {}

        private SearchResultsValue(ChatSearchResultsEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSearchResults(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SearchResultsValue && equalTo((SearchResultsValue) other);
        }

        private boolean equalTo(SearchResultsValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "StreamedChatResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("text-generation")
    private static final class TextGenerationValue implements Value {
        @JsonUnwrapped
        private ChatTextGenerationEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TextGenerationValue() {}

        private TextGenerationValue(ChatTextGenerationEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTextGeneration(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TextGenerationValue && equalTo((TextGenerationValue) other);
        }

        private boolean equalTo(TextGenerationValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "StreamedChatResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("citation-generation")
    private static final class CitationGenerationValue implements Value {
        @JsonUnwrapped
        private ChatCitationGenerationEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CitationGenerationValue() {}

        private CitationGenerationValue(ChatCitationGenerationEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCitationGeneration(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CitationGenerationValue && equalTo((CitationGenerationValue) other);
        }

        private boolean equalTo(CitationGenerationValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "StreamedChatResponse{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("stream-end")
    private static final class StreamEndValue implements Value {
        @JsonUnwrapped
        private ChatStreamEndEvent value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private StreamEndValue() {}

        private StreamEndValue(ChatStreamEndEvent value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitStreamEnd(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof StreamEndValue && equalTo((StreamEndValue) other);
        }

        private boolean equalTo(StreamEndValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "StreamedChatResponse{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "StreamedChatResponse{" + "type: " + type + ", value: " + value + "}";
        }
    }
}

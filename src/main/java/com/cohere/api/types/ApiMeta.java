/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ApiMeta.Builder.class)
public final class ApiMeta {
    private final Optional<ApiMetaApiVersion> apiVersion;

    private final Optional<List<String>> warnings;

    private final Map<String, Object> additionalProperties;

    private ApiMeta(
            Optional<ApiMetaApiVersion> apiVersion,
            Optional<List<String>> warnings,
            Map<String, Object> additionalProperties) {
        this.apiVersion = apiVersion;
        this.warnings = warnings;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("api_version")
    public Optional<ApiMetaApiVersion> getApiVersion() {
        return apiVersion;
    }

    @JsonProperty("warnings")
    public Optional<List<String>> getWarnings() {
        return warnings;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApiMeta && equalTo((ApiMeta) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApiMeta other) {
        return apiVersion.equals(other.apiVersion) && warnings.equals(other.warnings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.apiVersion, this.warnings);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ApiMetaApiVersion> apiVersion = Optional.empty();

        private Optional<List<String>> warnings = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApiMeta other) {
            apiVersion(other.getApiVersion());
            warnings(other.getWarnings());
            return this;
        }

        @JsonSetter(value = "api_version", nulls = Nulls.SKIP)
        public Builder apiVersion(Optional<ApiMetaApiVersion> apiVersion) {
            this.apiVersion = apiVersion;
            return this;
        }

        public Builder apiVersion(ApiMetaApiVersion apiVersion) {
            this.apiVersion = Optional.of(apiVersion);
            return this;
        }

        @JsonSetter(value = "warnings", nulls = Nulls.SKIP)
        public Builder warnings(Optional<List<String>> warnings) {
            this.warnings = warnings;
            return this;
        }

        public Builder warnings(List<String> warnings) {
            this.warnings = Optional.of(warnings);
            return this;
        }

        public ApiMeta build() {
            return new ApiMeta(apiVersion, warnings, additionalProperties);
        }
    }
}

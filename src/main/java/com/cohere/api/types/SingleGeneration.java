/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SingleGeneration.Builder.class)
public final class SingleGeneration {
    private final String id;

    private final String text;

    private final Optional<Integer> index;

    private final Optional<Double> likelihood;

    private final Optional<List<SingleGenerationTokenLikelihoodsItem>> tokenLikelihoods;

    private final Map<String, Object> additionalProperties;

    private SingleGeneration(
            String id,
            String text,
            Optional<Integer> index,
            Optional<Double> likelihood,
            Optional<List<SingleGenerationTokenLikelihoodsItem>> tokenLikelihoods,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.text = text;
        this.index = index;
        this.likelihood = likelihood;
        this.tokenLikelihoods = tokenLikelihoods;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("text")
    public String getText() {
        return text;
    }

    /**
     * @return Refers to the nth generation. Only present when <code>num_generations</code> is greater than zero.
     */
    @JsonProperty("index")
    public Optional<Integer> getIndex() {
        return index;
    }

    @JsonProperty("likelihood")
    public Optional<Double> getLikelihood() {
        return likelihood;
    }

    /**
     * @return Only returned if <code>return_likelihoods</code> is set to <code>GENERATION</code> or <code>ALL</code>. The likelihood refers to the average log-likelihood of the entire specified string, which is useful for <a href="likelihood-eval">evaluating the performance of your model</a>, especially if you've created a <a href="https://docs.cohere.com/docs/training-custom-models">custom model</a>. Individual token likelihoods provide the log-likelihood of each token. The first token will not have a likelihood.
     */
    @JsonProperty("token_likelihoods")
    public Optional<List<SingleGenerationTokenLikelihoodsItem>> getTokenLikelihoods() {
        return tokenLikelihoods;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SingleGeneration && equalTo((SingleGeneration) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SingleGeneration other) {
        return id.equals(other.id)
                && text.equals(other.text)
                && index.equals(other.index)
                && likelihood.equals(other.likelihood)
                && tokenLikelihoods.equals(other.tokenLikelihoods);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.text, this.index, this.likelihood, this.tokenLikelihoods);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        TextStage id(@NotNull String id);

        Builder from(SingleGeneration other);
    }

    public interface TextStage {
        _FinalStage text(@NotNull String text);
    }

    public interface _FinalStage {
        SingleGeneration build();

        /**
         * <p>Refers to the nth generation. Only present when <code>num_generations</code> is greater than zero.</p>
         */
        _FinalStage index(Optional<Integer> index);

        _FinalStage index(Integer index);

        _FinalStage likelihood(Optional<Double> likelihood);

        _FinalStage likelihood(Double likelihood);

        /**
         * <p>Only returned if <code>return_likelihoods</code> is set to <code>GENERATION</code> or <code>ALL</code>. The likelihood refers to the average log-likelihood of the entire specified string, which is useful for <a href="likelihood-eval">evaluating the performance of your model</a>, especially if you've created a <a href="https://docs.cohere.com/docs/training-custom-models">custom model</a>. Individual token likelihoods provide the log-likelihood of each token. The first token will not have a likelihood.</p>
         */
        _FinalStage tokenLikelihoods(Optional<List<SingleGenerationTokenLikelihoodsItem>> tokenLikelihoods);

        _FinalStage tokenLikelihoods(List<SingleGenerationTokenLikelihoodsItem> tokenLikelihoods);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, TextStage, _FinalStage {
        private String id;

        private String text;

        private Optional<List<SingleGenerationTokenLikelihoodsItem>> tokenLikelihoods = Optional.empty();

        private Optional<Double> likelihood = Optional.empty();

        private Optional<Integer> index = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SingleGeneration other) {
            id(other.getId());
            text(other.getText());
            index(other.getIndex());
            likelihood(other.getLikelihood());
            tokenLikelihoods(other.getTokenLikelihoods());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public TextStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("text")
        public _FinalStage text(@NotNull String text) {
            this.text = Objects.requireNonNull(text, "text must not be null");
            return this;
        }

        /**
         * <p>Only returned if <code>return_likelihoods</code> is set to <code>GENERATION</code> or <code>ALL</code>. The likelihood refers to the average log-likelihood of the entire specified string, which is useful for <a href="likelihood-eval">evaluating the performance of your model</a>, especially if you've created a <a href="https://docs.cohere.com/docs/training-custom-models">custom model</a>. Individual token likelihoods provide the log-likelihood of each token. The first token will not have a likelihood.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tokenLikelihoods(List<SingleGenerationTokenLikelihoodsItem> tokenLikelihoods) {
            this.tokenLikelihoods = Optional.ofNullable(tokenLikelihoods);
            return this;
        }

        /**
         * <p>Only returned if <code>return_likelihoods</code> is set to <code>GENERATION</code> or <code>ALL</code>. The likelihood refers to the average log-likelihood of the entire specified string, which is useful for <a href="likelihood-eval">evaluating the performance of your model</a>, especially if you've created a <a href="https://docs.cohere.com/docs/training-custom-models">custom model</a>. Individual token likelihoods provide the log-likelihood of each token. The first token will not have a likelihood.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "token_likelihoods", nulls = Nulls.SKIP)
        public _FinalStage tokenLikelihoods(Optional<List<SingleGenerationTokenLikelihoodsItem>> tokenLikelihoods) {
            this.tokenLikelihoods = tokenLikelihoods;
            return this;
        }

        @java.lang.Override
        public _FinalStage likelihood(Double likelihood) {
            this.likelihood = Optional.ofNullable(likelihood);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "likelihood", nulls = Nulls.SKIP)
        public _FinalStage likelihood(Optional<Double> likelihood) {
            this.likelihood = likelihood;
            return this;
        }

        /**
         * <p>Refers to the nth generation. Only present when <code>num_generations</code> is greater than zero.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage index(Integer index) {
            this.index = Optional.ofNullable(index);
            return this;
        }

        /**
         * <p>Refers to the nth generation. Only present when <code>num_generations</code> is greater than zero.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "index", nulls = Nulls.SKIP)
        public _FinalStage index(Optional<Integer> index) {
            this.index = index;
            return this;
        }

        @java.lang.Override
        public SingleGeneration build() {
            return new SingleGeneration(id, text, index, likelihood, tokenLikelihoods, additionalProperties);
        }
    }
}

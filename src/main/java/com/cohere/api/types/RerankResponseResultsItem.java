/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = RerankResponseResultsItem.Builder.class)
public final class RerankResponseResultsItem {
    private final Optional<RerankResponseResultsItemDocument> document;

    private final int index;

    private final double relevanceScore;

    private final Map<String, Object> additionalProperties;

    private RerankResponseResultsItem(
            Optional<RerankResponseResultsItemDocument> document,
            int index,
            double relevanceScore,
            Map<String, Object> additionalProperties) {
        this.document = document;
        this.index = index;
        this.relevanceScore = relevanceScore;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The doc object which was ranked
     */
    @JsonProperty("document")
    public Optional<RerankResponseResultsItemDocument> getDocument() {
        return document;
    }

    /**
     * @return The index of the input document
     */
    @JsonProperty("index")
    public int getIndex() {
        return index;
    }

    /**
     * @return A relevance score assigned to the ranking
     */
    @JsonProperty("relevance_score")
    public double getRelevanceScore() {
        return relevanceScore;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RerankResponseResultsItem && equalTo((RerankResponseResultsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RerankResponseResultsItem other) {
        return document.equals(other.document) && index == other.index && relevanceScore == other.relevanceScore;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.document, this.index, this.relevanceScore);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IndexStage builder() {
        return new Builder();
    }

    public interface IndexStage {
        RelevanceScoreStage index(int index);

        Builder from(RerankResponseResultsItem other);
    }

    public interface RelevanceScoreStage {
        _FinalStage relevanceScore(double relevanceScore);
    }

    public interface _FinalStage {
        RerankResponseResultsItem build();

        _FinalStage document(Optional<RerankResponseResultsItemDocument> document);

        _FinalStage document(RerankResponseResultsItemDocument document);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IndexStage, RelevanceScoreStage, _FinalStage {
        private int index;

        private double relevanceScore;

        private Optional<RerankResponseResultsItemDocument> document = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RerankResponseResultsItem other) {
            document(other.getDocument());
            index(other.getIndex());
            relevanceScore(other.getRelevanceScore());
            return this;
        }

        /**
         * <p>The index of the input document</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("index")
        public RelevanceScoreStage index(int index) {
            this.index = index;
            return this;
        }

        /**
         * <p>A relevance score assigned to the ranking</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("relevance_score")
        public _FinalStage relevanceScore(double relevanceScore) {
            this.relevanceScore = relevanceScore;
            return this;
        }

        /**
         * <p>The doc object which was ranked</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage document(RerankResponseResultsItemDocument document) {
            this.document = Optional.of(document);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "document", nulls = Nulls.SKIP)
        public _FinalStage document(Optional<RerankResponseResultsItemDocument> document) {
            this.document = document;
            return this;
        }

        @java.lang.Override
        public RerankResponseResultsItem build() {
            return new RerankResponseResultsItem(document, index, relevanceScore, additionalProperties);
        }
    }
}

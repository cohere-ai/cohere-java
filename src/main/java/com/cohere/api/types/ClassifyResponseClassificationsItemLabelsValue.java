/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ClassifyResponseClassificationsItemLabelsValue.Builder.class)
public final class ClassifyResponseClassificationsItemLabelsValue {
    private final Optional<Double> confidence;

    private final Map<String, Object> additionalProperties;

    private ClassifyResponseClassificationsItemLabelsValue(
            Optional<Double> confidence, Map<String, Object> additionalProperties) {
        this.confidence = confidence;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("confidence")
    public Optional<Double> getConfidence() {
        return confidence;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClassifyResponseClassificationsItemLabelsValue
                && equalTo((ClassifyResponseClassificationsItemLabelsValue) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClassifyResponseClassificationsItemLabelsValue other) {
        return confidence.equals(other.confidence);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.confidence);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> confidence = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClassifyResponseClassificationsItemLabelsValue other) {
            confidence(other.getConfidence());
            return this;
        }

        @JsonSetter(value = "confidence", nulls = Nulls.SKIP)
        public Builder confidence(Optional<Double> confidence) {
            this.confidence = confidence;
            return this;
        }

        public Builder confidence(Double confidence) {
            this.confidence = Optional.of(confidence);
            return this;
        }

        public ClassifyResponseClassificationsItemLabelsValue build() {
            return new ClassifyResponseClassificationsItemLabelsValue(confidence, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = EmbedJob.Builder.class)
public final class EmbedJob {
    private final String jobId;

    private final Optional<String> name;

    private final EmbedJobStatus status;

    private final OffsetDateTime createdAt;

    private final String inputDatasetId;

    private final Optional<String> outputDatasetId;

    private final String model;

    private final EmbedJobTruncate truncate;

    private final Optional<ApiMeta> meta;

    private final Map<String, Object> additionalProperties;

    private EmbedJob(
            String jobId,
            Optional<String> name,
            EmbedJobStatus status,
            OffsetDateTime createdAt,
            String inputDatasetId,
            Optional<String> outputDatasetId,
            String model,
            EmbedJobTruncate truncate,
            Optional<ApiMeta> meta,
            Map<String, Object> additionalProperties) {
        this.jobId = jobId;
        this.name = name;
        this.status = status;
        this.createdAt = createdAt;
        this.inputDatasetId = inputDatasetId;
        this.outputDatasetId = outputDatasetId;
        this.model = model;
        this.truncate = truncate;
        this.meta = meta;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ID of the embed job
     */
    @JsonProperty("job_id")
    public String getJobId() {
        return jobId;
    }

    /**
     * @return The name of the embed job
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The status of the embed job
     */
    @JsonProperty("status")
    public EmbedJobStatus getStatus() {
        return status;
    }

    /**
     * @return The creation date of the embed job
     */
    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return ID of the input dataset
     */
    @JsonProperty("input_dataset_id")
    public String getInputDatasetId() {
        return inputDatasetId;
    }

    /**
     * @return ID of the resulting output dataset
     */
    @JsonProperty("output_dataset_id")
    public Optional<String> getOutputDatasetId() {
        return outputDatasetId;
    }

    /**
     * @return ID of the model used to embed
     */
    @JsonProperty("model")
    public String getModel() {
        return model;
    }

    /**
     * @return The truncation option used
     */
    @JsonProperty("truncate")
    public EmbedJobTruncate getTruncate() {
        return truncate;
    }

    @JsonProperty("meta")
    public Optional<ApiMeta> getMeta() {
        return meta;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmbedJob && equalTo((EmbedJob) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmbedJob other) {
        return jobId.equals(other.jobId)
                && name.equals(other.name)
                && status.equals(other.status)
                && createdAt.equals(other.createdAt)
                && inputDatasetId.equals(other.inputDatasetId)
                && outputDatasetId.equals(other.outputDatasetId)
                && model.equals(other.model)
                && truncate.equals(other.truncate)
                && meta.equals(other.meta);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.jobId,
                this.name,
                this.status,
                this.createdAt,
                this.inputDatasetId,
                this.outputDatasetId,
                this.model,
                this.truncate,
                this.meta);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static JobIdStage builder() {
        return new Builder();
    }

    public interface JobIdStage {
        StatusStage jobId(String jobId);

        Builder from(EmbedJob other);
    }

    public interface StatusStage {
        CreatedAtStage status(EmbedJobStatus status);
    }

    public interface CreatedAtStage {
        InputDatasetIdStage createdAt(OffsetDateTime createdAt);
    }

    public interface InputDatasetIdStage {
        ModelStage inputDatasetId(String inputDatasetId);
    }

    public interface ModelStage {
        TruncateStage model(String model);
    }

    public interface TruncateStage {
        _FinalStage truncate(EmbedJobTruncate truncate);
    }

    public interface _FinalStage {
        EmbedJob build();

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage outputDatasetId(Optional<String> outputDatasetId);

        _FinalStage outputDatasetId(String outputDatasetId);

        _FinalStage meta(Optional<ApiMeta> meta);

        _FinalStage meta(ApiMeta meta);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements JobIdStage,
                    StatusStage,
                    CreatedAtStage,
                    InputDatasetIdStage,
                    ModelStage,
                    TruncateStage,
                    _FinalStage {
        private String jobId;

        private EmbedJobStatus status;

        private OffsetDateTime createdAt;

        private String inputDatasetId;

        private String model;

        private EmbedJobTruncate truncate;

        private Optional<ApiMeta> meta = Optional.empty();

        private Optional<String> outputDatasetId = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EmbedJob other) {
            jobId(other.getJobId());
            name(other.getName());
            status(other.getStatus());
            createdAt(other.getCreatedAt());
            inputDatasetId(other.getInputDatasetId());
            outputDatasetId(other.getOutputDatasetId());
            model(other.getModel());
            truncate(other.getTruncate());
            meta(other.getMeta());
            return this;
        }

        /**
         * <p>ID of the embed job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("job_id")
        public StatusStage jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }

        /**
         * <p>The status of the embed job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public CreatedAtStage status(EmbedJobStatus status) {
            this.status = status;
            return this;
        }

        /**
         * <p>The creation date of the embed job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("created_at")
        public InputDatasetIdStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>ID of the input dataset</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("input_dataset_id")
        public ModelStage inputDatasetId(String inputDatasetId) {
            this.inputDatasetId = inputDatasetId;
            return this;
        }

        /**
         * <p>ID of the model used to embed</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("model")
        public TruncateStage model(String model) {
            this.model = model;
            return this;
        }

        /**
         * <p>The truncation option used</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("truncate")
        public _FinalStage truncate(EmbedJobTruncate truncate) {
            this.truncate = truncate;
            return this;
        }

        @java.lang.Override
        public _FinalStage meta(ApiMeta meta) {
            this.meta = Optional.of(meta);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "meta", nulls = Nulls.SKIP)
        public _FinalStage meta(Optional<ApiMeta> meta) {
            this.meta = meta;
            return this;
        }

        /**
         * <p>ID of the resulting output dataset</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage outputDatasetId(String outputDatasetId) {
            this.outputDatasetId = Optional.of(outputDatasetId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "output_dataset_id", nulls = Nulls.SKIP)
        public _FinalStage outputDatasetId(Optional<String> outputDatasetId) {
            this.outputDatasetId = outputDatasetId;
            return this;
        }

        /**
         * <p>The name of the embed job</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.of(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public EmbedJob build() {
            return new EmbedJob(
                    jobId,
                    name,
                    status,
                    createdAt,
                    inputDatasetId,
                    outputDatasetId,
                    model,
                    truncate,
                    meta,
                    additionalProperties);
        }
    }
}

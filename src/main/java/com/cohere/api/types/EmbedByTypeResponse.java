/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = EmbedByTypeResponse.Builder.class)
public final class EmbedByTypeResponse {
    private final String id;

    private final EmbedByTypeResponseEmbeddings embeddings;

    private final List<String> texts;

    private final Optional<List<Image>> images;

    private final Optional<ApiMeta> meta;

    private final Map<String, Object> additionalProperties;

    private EmbedByTypeResponse(
            String id,
            EmbedByTypeResponseEmbeddings embeddings,
            List<String> texts,
            Optional<List<Image>> images,
            Optional<ApiMeta> meta,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.embeddings = embeddings;
        this.texts = texts;
        this.images = images;
        this.meta = meta;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return An object with different embedding types. The length of each embedding type array will be the same as the length of the original <code>texts</code> array.
     */
    @JsonProperty("embeddings")
    public EmbedByTypeResponseEmbeddings getEmbeddings() {
        return embeddings;
    }

    /**
     * @return The text entries for which embeddings were returned.
     */
    @JsonProperty("texts")
    public List<String> getTexts() {
        return texts;
    }

    /**
     * @return The image entries for which embeddings were returned.
     */
    @JsonProperty("images")
    public Optional<List<Image>> getImages() {
        return images;
    }

    @JsonProperty("meta")
    public Optional<ApiMeta> getMeta() {
        return meta;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmbedByTypeResponse && equalTo((EmbedByTypeResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmbedByTypeResponse other) {
        return id.equals(other.id)
                && embeddings.equals(other.embeddings)
                && texts.equals(other.texts)
                && images.equals(other.images)
                && meta.equals(other.meta);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.embeddings, this.texts, this.images, this.meta);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        EmbeddingsStage id(String id);

        Builder from(EmbedByTypeResponse other);
    }

    public interface EmbeddingsStage {
        _FinalStage embeddings(EmbedByTypeResponseEmbeddings embeddings);
    }

    public interface _FinalStage {
        EmbedByTypeResponse build();

        _FinalStage texts(List<String> texts);

        _FinalStage addTexts(String texts);

        _FinalStage addAllTexts(List<String> texts);

        _FinalStage images(Optional<List<Image>> images);

        _FinalStage images(List<Image> images);

        _FinalStage meta(Optional<ApiMeta> meta);

        _FinalStage meta(ApiMeta meta);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, EmbeddingsStage, _FinalStage {
        private String id;

        private EmbedByTypeResponseEmbeddings embeddings;

        private Optional<ApiMeta> meta = Optional.empty();

        private Optional<List<Image>> images = Optional.empty();

        private List<String> texts = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EmbedByTypeResponse other) {
            id(other.getId());
            embeddings(other.getEmbeddings());
            texts(other.getTexts());
            images(other.getImages());
            meta(other.getMeta());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public EmbeddingsStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>An object with different embedding types. The length of each embedding type array will be the same as the length of the original <code>texts</code> array.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("embeddings")
        public _FinalStage embeddings(EmbedByTypeResponseEmbeddings embeddings) {
            this.embeddings = embeddings;
            return this;
        }

        @java.lang.Override
        public _FinalStage meta(ApiMeta meta) {
            this.meta = Optional.of(meta);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "meta", nulls = Nulls.SKIP)
        public _FinalStage meta(Optional<ApiMeta> meta) {
            this.meta = meta;
            return this;
        }

        /**
         * <p>The image entries for which embeddings were returned.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage images(List<Image> images) {
            this.images = Optional.of(images);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "images", nulls = Nulls.SKIP)
        public _FinalStage images(Optional<List<Image>> images) {
            this.images = images;
            return this;
        }

        /**
         * <p>The text entries for which embeddings were returned.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllTexts(List<String> texts) {
            this.texts.addAll(texts);
            return this;
        }

        /**
         * <p>The text entries for which embeddings were returned.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addTexts(String texts) {
            this.texts.add(texts);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "texts", nulls = Nulls.SKIP)
        public _FinalStage texts(List<String> texts) {
            this.texts.clear();
            this.texts.addAll(texts);
            return this;
        }

        @java.lang.Override
        public EmbedByTypeResponse build() {
            return new EmbedByTypeResponse(id, embeddings, texts, images, meta, additionalProperties);
        }
    }
}

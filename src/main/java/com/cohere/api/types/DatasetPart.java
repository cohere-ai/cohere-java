/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DatasetPart.Builder.class)
public final class DatasetPart {
    private final String id;

    private final String name;

    private final Optional<String> url;

    private final Optional<Integer> index;

    private final Optional<Integer> sizeBytes;

    private final Optional<Integer> numRows;

    private final Optional<String> originalUrl;

    private final Map<String, Object> additionalProperties;

    private DatasetPart(
            String id,
            String name,
            Optional<String> url,
            Optional<Integer> index,
            Optional<Integer> sizeBytes,
            Optional<Integer> numRows,
            Optional<String> originalUrl,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.url = url;
        this.index = index;
        this.sizeBytes = sizeBytes;
        this.numRows = numRows;
        this.originalUrl = originalUrl;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The dataset part ID
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The name of the dataset part
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The download url of the file
     */
    @JsonProperty("url")
    public Optional<String> getUrl() {
        return url;
    }

    /**
     * @return The index of the file
     */
    @JsonProperty("index")
    public Optional<Integer> getIndex() {
        return index;
    }

    /**
     * @return The size of the file in bytes
     */
    @JsonProperty("size_bytes")
    public Optional<Integer> getSizeBytes() {
        return sizeBytes;
    }

    /**
     * @return The number of rows in the file
     */
    @JsonProperty("num_rows")
    public Optional<Integer> getNumRows() {
        return numRows;
    }

    /**
     * @return The download url of the original file
     */
    @JsonProperty("original_url")
    public Optional<String> getOriginalUrl() {
        return originalUrl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DatasetPart && equalTo((DatasetPart) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DatasetPart other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && url.equals(other.url)
                && index.equals(other.index)
                && sizeBytes.equals(other.sizeBytes)
                && numRows.equals(other.numRows)
                && originalUrl.equals(other.originalUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.name, this.url, this.index, this.sizeBytes, this.numRows, this.originalUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        NameStage id(String id);

        Builder from(DatasetPart other);
    }

    public interface NameStage {
        _FinalStage name(String name);
    }

    public interface _FinalStage {
        DatasetPart build();

        _FinalStage url(Optional<String> url);

        _FinalStage url(String url);

        _FinalStage index(Optional<Integer> index);

        _FinalStage index(Integer index);

        _FinalStage sizeBytes(Optional<Integer> sizeBytes);

        _FinalStage sizeBytes(Integer sizeBytes);

        _FinalStage numRows(Optional<Integer> numRows);

        _FinalStage numRows(Integer numRows);

        _FinalStage originalUrl(Optional<String> originalUrl);

        _FinalStage originalUrl(String originalUrl);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, NameStage, _FinalStage {
        private String id;

        private String name;

        private Optional<String> originalUrl = Optional.empty();

        private Optional<Integer> numRows = Optional.empty();

        private Optional<Integer> sizeBytes = Optional.empty();

        private Optional<Integer> index = Optional.empty();

        private Optional<String> url = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DatasetPart other) {
            id(other.getId());
            name(other.getName());
            url(other.getUrl());
            index(other.getIndex());
            sizeBytes(other.getSizeBytes());
            numRows(other.getNumRows());
            originalUrl(other.getOriginalUrl());
            return this;
        }

        /**
         * <p>The dataset part ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>The name of the dataset part</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(String name) {
            this.name = name;
            return this;
        }

        /**
         * <p>The download url of the original file</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage originalUrl(String originalUrl) {
            this.originalUrl = Optional.of(originalUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "original_url", nulls = Nulls.SKIP)
        public _FinalStage originalUrl(Optional<String> originalUrl) {
            this.originalUrl = originalUrl;
            return this;
        }

        /**
         * <p>The number of rows in the file</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage numRows(Integer numRows) {
            this.numRows = Optional.of(numRows);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "num_rows", nulls = Nulls.SKIP)
        public _FinalStage numRows(Optional<Integer> numRows) {
            this.numRows = numRows;
            return this;
        }

        /**
         * <p>The size of the file in bytes</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sizeBytes(Integer sizeBytes) {
            this.sizeBytes = Optional.of(sizeBytes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "size_bytes", nulls = Nulls.SKIP)
        public _FinalStage sizeBytes(Optional<Integer> sizeBytes) {
            this.sizeBytes = sizeBytes;
            return this;
        }

        /**
         * <p>The index of the file</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage index(Integer index) {
            this.index = Optional.of(index);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "index", nulls = Nulls.SKIP)
        public _FinalStage index(Optional<Integer> index) {
            this.index = index;
            return this;
        }

        /**
         * <p>The download url of the file</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage url(String url) {
            this.url = Optional.of(url);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public _FinalStage url(Optional<String> url) {
            this.url = url;
            return this;
        }

        @java.lang.Override
        public DatasetPart build() {
            return new DatasetPart(id, name, url, index, sizeBytes, numRows, originalUrl, additionalProperties);
        }
    }
}

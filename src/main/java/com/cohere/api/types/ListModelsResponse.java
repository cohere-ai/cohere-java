/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListModelsResponse.Builder.class)
public final class ListModelsResponse {
    private final List<GetModelResponse> models;

    private final Optional<String> nextPageToken;

    private final Map<String, Object> additionalProperties;

    private ListModelsResponse(
            List<GetModelResponse> models, Optional<String> nextPageToken, Map<String, Object> additionalProperties) {
        this.models = models;
        this.nextPageToken = nextPageToken;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("models")
    public List<GetModelResponse> getModels() {
        return models;
    }

    /**
     * @return A token to retrieve the next page of results. Provide in the page_token parameter of the next request.
     */
    @JsonProperty("next_page_token")
    public Optional<String> getNextPageToken() {
        return nextPageToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListModelsResponse && equalTo((ListModelsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListModelsResponse other) {
        return models.equals(other.models) && nextPageToken.equals(other.nextPageToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.models, this.nextPageToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<GetModelResponse> models = new ArrayList<>();

        private Optional<String> nextPageToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListModelsResponse other) {
            models(other.getModels());
            nextPageToken(other.getNextPageToken());
            return this;
        }

        @JsonSetter(value = "models", nulls = Nulls.SKIP)
        public Builder models(List<GetModelResponse> models) {
            this.models.clear();
            this.models.addAll(models);
            return this;
        }

        public Builder addModels(GetModelResponse models) {
            this.models.add(models);
            return this;
        }

        public Builder addAllModels(List<GetModelResponse> models) {
            this.models.addAll(models);
            return this;
        }

        /**
         * <p>A token to retrieve the next page of results. Provide in the page_token parameter of the next request.</p>
         */
        @JsonSetter(value = "next_page_token", nulls = Nulls.SKIP)
        public Builder nextPageToken(Optional<String> nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }

        public Builder nextPageToken(String nextPageToken) {
            this.nextPageToken = Optional.ofNullable(nextPageToken);
            return this;
        }

        public ListModelsResponse build() {
            return new ListModelsResponse(models, nextPageToken, additionalProperties);
        }
    }
}

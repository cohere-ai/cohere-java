/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ChatStreamRequestResponseFormat.Builder.class)
public final class ChatStreamRequestResponseFormat {
    private final ChatStreamRequestResponseFormatType type;

    private final Optional<Map<String, Object>> schema;

    private final Map<String, Object> additionalProperties;

    private ChatStreamRequestResponseFormat(
            ChatStreamRequestResponseFormatType type,
            Optional<Map<String, Object>> schema,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.schema = schema;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When set to JSON, the model will return valid JSON. Note that running out of tokens will result in an invalid JSON.
     */
    @JsonProperty("type")
    public ChatStreamRequestResponseFormatType getType() {
        return type;
    }

    /**
     * @return [BETA] A JSON schema object that the output will adhere to. There are some restrictions we have on the schema, refer to <a href="">our guide</a> for more information.
     * Example (required name and age object):
     * <pre><code class="language-json">{
     *   &quot;type&quot;: &quot;object&quot;,
     *   &quot;properties&quot;: {
     *     &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; },
     *     &quot;age&quot;: { &quot;type&quot;: &quot;integer&quot; }
     *   },
     *   &quot;required&quot;: [&quot;name&quot;, &quot;age&quot;]
     * }
     * </code></pre>
     */
    @JsonProperty("schema")
    public Optional<Map<String, Object>> getSchema() {
        return schema;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatStreamRequestResponseFormat && equalTo((ChatStreamRequestResponseFormat) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatStreamRequestResponseFormat other) {
        return type.equals(other.type) && schema.equals(other.schema);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.schema);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        _FinalStage type(ChatStreamRequestResponseFormatType type);

        Builder from(ChatStreamRequestResponseFormat other);
    }

    public interface _FinalStage {
        ChatStreamRequestResponseFormat build();

        _FinalStage schema(Optional<Map<String, Object>> schema);

        _FinalStage schema(Map<String, Object> schema);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private ChatStreamRequestResponseFormatType type;

        private Optional<Map<String, Object>> schema = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ChatStreamRequestResponseFormat other) {
            type(other.getType());
            schema(other.getSchema());
            return this;
        }

        /**
         * <p>When set to JSON, the model will return valid JSON. Note that running out of tokens will result in an invalid JSON.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(ChatStreamRequestResponseFormatType type) {
            this.type = type;
            return this;
        }

        /**
         * <p>[BETA] A JSON schema object that the output will adhere to. There are some restrictions we have on the schema, refer to <a href="">our guide</a> for more information.
         * Example (required name and age object):</p>
         * <pre><code class="language-json">{
         *   &quot;type&quot;: &quot;object&quot;,
         *   &quot;properties&quot;: {
         *     &quot;name&quot;: { &quot;type&quot;: &quot;string&quot; },
         *     &quot;age&quot;: { &quot;type&quot;: &quot;integer&quot; }
         *   },
         *   &quot;required&quot;: [&quot;name&quot;, &quot;age&quot;]
         * }
         * </code></pre>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage schema(Map<String, Object> schema) {
            this.schema = Optional.of(schema);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "schema", nulls = Nulls.SKIP)
        public _FinalStage schema(Optional<Map<String, Object>> schema) {
            this.schema = schema;
            return this;
        }

        @java.lang.Override
        public ChatStreamRequestResponseFormat build() {
            return new ChatStreamRequestResponseFormat(type, schema, additionalProperties);
        }
    }
}

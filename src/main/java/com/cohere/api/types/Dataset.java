/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Dataset.Builder.class)
public final class Dataset {
    private final String id;

    private final String name;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final DatasetType datasetType;

    private final DatasetValidationStatus validationStatus;

    private final Optional<String> validationError;

    private final Optional<String> schema;

    private final Optional<List<String>> requiredFields;

    private final Optional<List<String>> preserveFields;

    private final Optional<List<DatasetPart>> datasetParts;

    private final Optional<List<String>> validationWarnings;

    private final Map<String, Object> additionalProperties;

    private Dataset(
            String id,
            String name,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            DatasetType datasetType,
            DatasetValidationStatus validationStatus,
            Optional<String> validationError,
            Optional<String> schema,
            Optional<List<String>> requiredFields,
            Optional<List<String>> preserveFields,
            Optional<List<DatasetPart>> datasetParts,
            Optional<List<String>> validationWarnings,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.datasetType = datasetType;
        this.validationStatus = validationStatus;
        this.validationError = validationError;
        this.schema = schema;
        this.requiredFields = requiredFields;
        this.preserveFields = preserveFields;
        this.datasetParts = datasetParts;
        this.validationWarnings = validationWarnings;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The dataset ID
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The name of the dataset
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The creation date
     */
    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The last update date
     */
    @JsonProperty("updated_at")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("dataset_type")
    public DatasetType getDatasetType() {
        return datasetType;
    }

    @JsonProperty("validation_status")
    public DatasetValidationStatus getValidationStatus() {
        return validationStatus;
    }

    /**
     * @return Errors found during validation
     */
    @JsonProperty("validation_error")
    public Optional<String> getValidationError() {
        return validationError;
    }

    /**
     * @return the avro schema of the dataset
     */
    @JsonProperty("schema")
    public Optional<String> getSchema() {
        return schema;
    }

    @JsonProperty("required_fields")
    public Optional<List<String>> getRequiredFields() {
        return requiredFields;
    }

    @JsonProperty("preserve_fields")
    public Optional<List<String>> getPreserveFields() {
        return preserveFields;
    }

    /**
     * @return the underlying files that make up the dataset
     */
    @JsonProperty("dataset_parts")
    public Optional<List<DatasetPart>> getDatasetParts() {
        return datasetParts;
    }

    /**
     * @return warnings found during validation
     */
    @JsonProperty("validation_warnings")
    public Optional<List<String>> getValidationWarnings() {
        return validationWarnings;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Dataset && equalTo((Dataset) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Dataset other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && datasetType.equals(other.datasetType)
                && validationStatus.equals(other.validationStatus)
                && validationError.equals(other.validationError)
                && schema.equals(other.schema)
                && requiredFields.equals(other.requiredFields)
                && preserveFields.equals(other.preserveFields)
                && datasetParts.equals(other.datasetParts)
                && validationWarnings.equals(other.validationWarnings);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.name,
                this.createdAt,
                this.updatedAt,
                this.datasetType,
                this.validationStatus,
                this.validationError,
                this.schema,
                this.requiredFields,
                this.preserveFields,
                this.datasetParts,
                this.validationWarnings);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        NameStage id(String id);

        Builder from(Dataset other);
    }

    public interface NameStage {
        CreatedAtStage name(String name);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(OffsetDateTime createdAt);
    }

    public interface UpdatedAtStage {
        DatasetTypeStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface DatasetTypeStage {
        ValidationStatusStage datasetType(DatasetType datasetType);
    }

    public interface ValidationStatusStage {
        _FinalStage validationStatus(DatasetValidationStatus validationStatus);
    }

    public interface _FinalStage {
        Dataset build();

        _FinalStage validationError(Optional<String> validationError);

        _FinalStage validationError(String validationError);

        _FinalStage schema(Optional<String> schema);

        _FinalStage schema(String schema);

        _FinalStage requiredFields(Optional<List<String>> requiredFields);

        _FinalStage requiredFields(List<String> requiredFields);

        _FinalStage preserveFields(Optional<List<String>> preserveFields);

        _FinalStage preserveFields(List<String> preserveFields);

        _FinalStage datasetParts(Optional<List<DatasetPart>> datasetParts);

        _FinalStage datasetParts(List<DatasetPart> datasetParts);

        _FinalStage validationWarnings(Optional<List<String>> validationWarnings);

        _FinalStage validationWarnings(List<String> validationWarnings);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    NameStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    DatasetTypeStage,
                    ValidationStatusStage,
                    _FinalStage {
        private String id;

        private String name;

        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private DatasetType datasetType;

        private DatasetValidationStatus validationStatus;

        private Optional<List<String>> validationWarnings = Optional.empty();

        private Optional<List<DatasetPart>> datasetParts = Optional.empty();

        private Optional<List<String>> preserveFields = Optional.empty();

        private Optional<List<String>> requiredFields = Optional.empty();

        private Optional<String> schema = Optional.empty();

        private Optional<String> validationError = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Dataset other) {
            id(other.getId());
            name(other.getName());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            datasetType(other.getDatasetType());
            validationStatus(other.getValidationStatus());
            validationError(other.getValidationError());
            schema(other.getSchema());
            requiredFields(other.getRequiredFields());
            preserveFields(other.getPreserveFields());
            datasetParts(other.getDatasetParts());
            validationWarnings(other.getValidationWarnings());
            return this;
        }

        /**
         * <p>The dataset ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>The name of the dataset</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public CreatedAtStage name(String name) {
            this.name = name;
            return this;
        }

        /**
         * <p>The creation date</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("created_at")
        public UpdatedAtStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The last update date</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updated_at")
        public DatasetTypeStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("dataset_type")
        public ValidationStatusStage datasetType(DatasetType datasetType) {
            this.datasetType = datasetType;
            return this;
        }

        @java.lang.Override
        @JsonSetter("validation_status")
        public _FinalStage validationStatus(DatasetValidationStatus validationStatus) {
            this.validationStatus = validationStatus;
            return this;
        }

        /**
         * <p>warnings found during validation</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage validationWarnings(List<String> validationWarnings) {
            this.validationWarnings = Optional.of(validationWarnings);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "validation_warnings", nulls = Nulls.SKIP)
        public _FinalStage validationWarnings(Optional<List<String>> validationWarnings) {
            this.validationWarnings = validationWarnings;
            return this;
        }

        /**
         * <p>the underlying files that make up the dataset</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage datasetParts(List<DatasetPart> datasetParts) {
            this.datasetParts = Optional.of(datasetParts);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "dataset_parts", nulls = Nulls.SKIP)
        public _FinalStage datasetParts(Optional<List<DatasetPart>> datasetParts) {
            this.datasetParts = datasetParts;
            return this;
        }

        @java.lang.Override
        public _FinalStage preserveFields(List<String> preserveFields) {
            this.preserveFields = Optional.of(preserveFields);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "preserve_fields", nulls = Nulls.SKIP)
        public _FinalStage preserveFields(Optional<List<String>> preserveFields) {
            this.preserveFields = preserveFields;
            return this;
        }

        @java.lang.Override
        public _FinalStage requiredFields(List<String> requiredFields) {
            this.requiredFields = Optional.of(requiredFields);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "required_fields", nulls = Nulls.SKIP)
        public _FinalStage requiredFields(Optional<List<String>> requiredFields) {
            this.requiredFields = requiredFields;
            return this;
        }

        /**
         * <p>the avro schema of the dataset</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage schema(String schema) {
            this.schema = Optional.of(schema);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "schema", nulls = Nulls.SKIP)
        public _FinalStage schema(Optional<String> schema) {
            this.schema = schema;
            return this;
        }

        /**
         * <p>Errors found during validation</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage validationError(String validationError) {
            this.validationError = Optional.of(validationError);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "validation_error", nulls = Nulls.SKIP)
        public _FinalStage validationError(Optional<String> validationError) {
            this.validationError = validationError;
            return this;
        }

        @java.lang.Override
        public Dataset build() {
            return new Dataset(
                    id,
                    name,
                    createdAt,
                    updatedAt,
                    datasetType,
                    validationStatus,
                    validationError,
                    schema,
                    requiredFields,
                    preserveFields,
                    datasetParts,
                    validationWarnings,
                    additionalProperties);
        }
    }
}

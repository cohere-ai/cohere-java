/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ConnectorOAuth.Builder.class)
public final class ConnectorOAuth {
    private final String authorizeUrl;

    private final String tokenUrl;

    private final Optional<String> scope;

    private final Map<String, Object> additionalProperties;

    private ConnectorOAuth(
            String authorizeUrl, String tokenUrl, Optional<String> scope, Map<String, Object> additionalProperties) {
        this.authorizeUrl = authorizeUrl;
        this.tokenUrl = tokenUrl;
        this.scope = scope;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The OAuth 2.0 /authorize endpoint to use when users authorize the connector.
     */
    @JsonProperty("authorize_url")
    public String getAuthorizeUrl() {
        return authorizeUrl;
    }

    /**
     * @return The OAuth 2.0 /token endpoint to use when users authorize the connector.
     */
    @JsonProperty("token_url")
    public String getTokenUrl() {
        return tokenUrl;
    }

    /**
     * @return The OAuth scopes to request when users authorize the connector.
     */
    @JsonProperty("scope")
    public Optional<String> getScope() {
        return scope;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConnectorOAuth && equalTo((ConnectorOAuth) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConnectorOAuth other) {
        return authorizeUrl.equals(other.authorizeUrl) && tokenUrl.equals(other.tokenUrl) && scope.equals(other.scope);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.authorizeUrl, this.tokenUrl, this.scope);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AuthorizeUrlStage builder() {
        return new Builder();
    }

    public interface AuthorizeUrlStage {
        TokenUrlStage authorizeUrl(String authorizeUrl);

        Builder from(ConnectorOAuth other);
    }

    public interface TokenUrlStage {
        _FinalStage tokenUrl(String tokenUrl);
    }

    public interface _FinalStage {
        ConnectorOAuth build();

        _FinalStage scope(Optional<String> scope);

        _FinalStage scope(String scope);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AuthorizeUrlStage, TokenUrlStage, _FinalStage {
        private String authorizeUrl;

        private String tokenUrl;

        private Optional<String> scope = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(ConnectorOAuth other) {
            authorizeUrl(other.getAuthorizeUrl());
            tokenUrl(other.getTokenUrl());
            scope(other.getScope());
            return this;
        }

        /**
         * <p>The OAuth 2.0 /authorize endpoint to use when users authorize the connector.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("authorize_url")
        public TokenUrlStage authorizeUrl(String authorizeUrl) {
            this.authorizeUrl = authorizeUrl;
            return this;
        }

        /**
         * <p>The OAuth 2.0 /token endpoint to use when users authorize the connector.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("token_url")
        public _FinalStage tokenUrl(String tokenUrl) {
            this.tokenUrl = tokenUrl;
            return this;
        }

        /**
         * <p>The OAuth scopes to request when users authorize the connector.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage scope(String scope) {
            this.scope = Optional.of(scope);
            return this;
        }

        @Override
        @JsonSetter(value = "scope", nulls = Nulls.SKIP)
        public _FinalStage scope(Optional<String> scope) {
            this.scope = scope;
            return this;
        }

        @Override
        public ConnectorOAuth build() {
            return new ConnectorOAuth(authorizeUrl, tokenUrl, scope, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ToolParameterDefinitionsValue.Builder.class)
public final class ToolParameterDefinitionsValue {
    private final Optional<String> description;

    private final String type;

    private final Optional<Boolean> required;

    private final Map<String, Object> additionalProperties;

    private ToolParameterDefinitionsValue(
            Optional<String> description,
            String type,
            Optional<Boolean> required,
            Map<String, Object> additionalProperties) {
        this.description = description;
        this.type = type;
        this.required = required;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The description of the parameter.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return The type of the parameter. Must be a valid Python type.
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return Denotes whether the parameter is always present (required) or not. Defaults to not required.
     */
    @JsonProperty("required")
    public Optional<Boolean> getRequired() {
        return required;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ToolParameterDefinitionsValue && equalTo((ToolParameterDefinitionsValue) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ToolParameterDefinitionsValue other) {
        return description.equals(other.description) && type.equals(other.type) && required.equals(other.required);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.description, this.type, this.required);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The type of the parameter. Must be a valid Python type.</p>
         */
        _FinalStage type(@NotNull String type);

        Builder from(ToolParameterDefinitionsValue other);
    }

    public interface _FinalStage {
        ToolParameterDefinitionsValue build();

        /**
         * <p>The description of the parameter.</p>
         */
        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        /**
         * <p>Denotes whether the parameter is always present (required) or not. Defaults to not required.</p>
         */
        _FinalStage required(Optional<Boolean> required);

        _FinalStage required(Boolean required);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private String type;

        private Optional<Boolean> required = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ToolParameterDefinitionsValue other) {
            description(other.getDescription());
            type(other.getType());
            required(other.getRequired());
            return this;
        }

        /**
         * <p>The type of the parameter. Must be a valid Python type.</p>
         * <p>The type of the parameter. Must be a valid Python type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>Denotes whether the parameter is always present (required) or not. Defaults to not required.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage required(Boolean required) {
            this.required = Optional.ofNullable(required);
            return this;
        }

        /**
         * <p>Denotes whether the parameter is always present (required) or not. Defaults to not required.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "required", nulls = Nulls.SKIP)
        public _FinalStage required(Optional<Boolean> required) {
            this.required = required;
            return this;
        }

        /**
         * <p>The description of the parameter.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>The description of the parameter.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public ToolParameterDefinitionsValue build() {
            return new ToolParameterDefinitionsValue(description, type, required, additionalProperties);
        }
    }
}

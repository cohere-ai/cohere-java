/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ChatResponse.Builder.class)
public final class ChatResponse {
    private final String id;

    private final ChatFinishReason finishReason;

    private final Optional<String> prompt;

    private final AssistantMessageResponse message;

    private final Optional<Usage> usage;

    private final Optional<List<LogprobItem>> logprobs;

    private final Map<String, Object> additionalProperties;

    private ChatResponse(
            String id,
            ChatFinishReason finishReason,
            Optional<String> prompt,
            AssistantMessageResponse message,
            Optional<Usage> usage,
            Optional<List<LogprobItem>> logprobs,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.finishReason = finishReason;
        this.prompt = prompt;
        this.message = message;
        this.usage = usage;
        this.logprobs = logprobs;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the generated reply. Useful for submitting feedback.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("finish_reason")
    public ChatFinishReason getFinishReason() {
        return finishReason;
    }

    /**
     * @return The prompt that was used. Only present when <code>return_prompt</code> in the request is set to true.
     */
    @JsonProperty("prompt")
    public Optional<String> getPrompt() {
        return prompt;
    }

    @JsonProperty("message")
    public AssistantMessageResponse getMessage() {
        return message;
    }

    @JsonProperty("usage")
    public Optional<Usage> getUsage() {
        return usage;
    }

    @JsonProperty("logprobs")
    public Optional<List<LogprobItem>> getLogprobs() {
        return logprobs;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChatResponse && equalTo((ChatResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChatResponse other) {
        return id.equals(other.id)
                && finishReason.equals(other.finishReason)
                && prompt.equals(other.prompt)
                && message.equals(other.message)
                && usage.equals(other.usage)
                && logprobs.equals(other.logprobs);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.finishReason, this.prompt, this.message, this.usage, this.logprobs);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        FinishReasonStage id(@NotNull String id);

        Builder from(ChatResponse other);
    }

    public interface FinishReasonStage {
        MessageStage finishReason(@NotNull ChatFinishReason finishReason);
    }

    public interface MessageStage {
        _FinalStage message(@NotNull AssistantMessageResponse message);
    }

    public interface _FinalStage {
        ChatResponse build();

        _FinalStage prompt(Optional<String> prompt);

        _FinalStage prompt(String prompt);

        _FinalStage usage(Optional<Usage> usage);

        _FinalStage usage(Usage usage);

        _FinalStage logprobs(Optional<List<LogprobItem>> logprobs);

        _FinalStage logprobs(List<LogprobItem> logprobs);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, FinishReasonStage, MessageStage, _FinalStage {
        private String id;

        private ChatFinishReason finishReason;

        private AssistantMessageResponse message;

        private Optional<List<LogprobItem>> logprobs = Optional.empty();

        private Optional<Usage> usage = Optional.empty();

        private Optional<String> prompt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ChatResponse other) {
            id(other.getId());
            finishReason(other.getFinishReason());
            prompt(other.getPrompt());
            message(other.getMessage());
            usage(other.getUsage());
            logprobs(other.getLogprobs());
            return this;
        }

        /**
         * <p>Unique identifier for the generated reply. Useful for submitting feedback.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public FinishReasonStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("finish_reason")
        public MessageStage finishReason(@NotNull ChatFinishReason finishReason) {
            this.finishReason = Objects.requireNonNull(finishReason, "finishReason must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("message")
        public _FinalStage message(@NotNull AssistantMessageResponse message) {
            this.message = Objects.requireNonNull(message, "message must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage logprobs(List<LogprobItem> logprobs) {
            this.logprobs = Optional.ofNullable(logprobs);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "logprobs", nulls = Nulls.SKIP)
        public _FinalStage logprobs(Optional<List<LogprobItem>> logprobs) {
            this.logprobs = logprobs;
            return this;
        }

        @java.lang.Override
        public _FinalStage usage(Usage usage) {
            this.usage = Optional.ofNullable(usage);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "usage", nulls = Nulls.SKIP)
        public _FinalStage usage(Optional<Usage> usage) {
            this.usage = usage;
            return this;
        }

        /**
         * <p>The prompt that was used. Only present when <code>return_prompt</code> in the request is set to true.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage prompt(String prompt) {
            this.prompt = Optional.ofNullable(prompt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "prompt", nulls = Nulls.SKIP)
        public _FinalStage prompt(Optional<String> prompt) {
            this.prompt = prompt;
            return this;
        }

        @java.lang.Override
        public ChatResponse build() {
            return new ChatResponse(id, finishReason, prompt, message, usage, logprobs, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Usage.Builder.class)
public final class Usage {
    private final Optional<UsageBilledUnits> billedUnits;

    private final Optional<UsageTokens> tokens;

    private final Map<String, Object> additionalProperties;

    private Usage(
            Optional<UsageBilledUnits> billedUnits,
            Optional<UsageTokens> tokens,
            Map<String, Object> additionalProperties) {
        this.billedUnits = billedUnits;
        this.tokens = tokens;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("billed_units")
    public Optional<UsageBilledUnits> getBilledUnits() {
        return billedUnits;
    }

    @JsonProperty("tokens")
    public Optional<UsageTokens> getTokens() {
        return tokens;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Usage && equalTo((Usage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Usage other) {
        return billedUnits.equals(other.billedUnits) && tokens.equals(other.tokens);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.billedUnits, this.tokens);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<UsageBilledUnits> billedUnits = Optional.empty();

        private Optional<UsageTokens> tokens = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Usage other) {
            billedUnits(other.getBilledUnits());
            tokens(other.getTokens());
            return this;
        }

        @JsonSetter(value = "billed_units", nulls = Nulls.SKIP)
        public Builder billedUnits(Optional<UsageBilledUnits> billedUnits) {
            this.billedUnits = billedUnits;
            return this;
        }

        public Builder billedUnits(UsageBilledUnits billedUnits) {
            this.billedUnits = Optional.of(billedUnits);
            return this;
        }

        @JsonSetter(value = "tokens", nulls = Nulls.SKIP)
        public Builder tokens(Optional<UsageTokens> tokens) {
            this.tokens = tokens;
            return this;
        }

        public Builder tokens(UsageTokens tokens) {
            this.tokens = Optional.of(tokens);
            return this;
        }

        public Usage build() {
            return new Usage(billedUnits, tokens, additionalProperties);
        }
    }
}

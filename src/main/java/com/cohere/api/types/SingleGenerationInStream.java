/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SingleGenerationInStream.Builder.class)
public final class SingleGenerationInStream {
    private final String id;

    private final String text;

    private final Optional<Integer> index;

    private final Map<String, Object> additionalProperties;

    private SingleGenerationInStream(
            String id, String text, Optional<Integer> index, Map<String, Object> additionalProperties) {
        this.id = id;
        this.text = text;
        this.index = index;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return Full text of the generation.
     */
    @JsonProperty("text")
    public String getText() {
        return text;
    }

    /**
     * @return Refers to the nth generation. Only present when <code>num_generations</code> is greater than zero.
     */
    @JsonProperty("index")
    public Optional<Integer> getIndex() {
        return index;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SingleGenerationInStream && equalTo((SingleGenerationInStream) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SingleGenerationInStream other) {
        return id.equals(other.id) && text.equals(other.text) && index.equals(other.index);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.text, this.index);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        TextStage id(String id);

        Builder from(SingleGenerationInStream other);
    }

    public interface TextStage {
        _FinalStage text(String text);
    }

    public interface _FinalStage {
        SingleGenerationInStream build();

        _FinalStage index(Optional<Integer> index);

        _FinalStage index(Integer index);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, TextStage, _FinalStage {
        private String id;

        private String text;

        private Optional<Integer> index = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(SingleGenerationInStream other) {
            id(other.getId());
            text(other.getText());
            index(other.getIndex());
            return this;
        }

        @Override
        @JsonSetter("id")
        public TextStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>Full text of the generation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("text")
        public _FinalStage text(String text) {
            this.text = text;
            return this;
        }

        /**
         * <p>Refers to the nth generation. Only present when <code>num_generations</code> is greater than zero.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage index(Integer index) {
            this.index = Optional.of(index);
            return this;
        }

        @Override
        @JsonSetter(value = "index", nulls = Nulls.SKIP)
        public _FinalStage index(Optional<Integer> index) {
            this.index = index;
            return this;
        }

        @Override
        public SingleGenerationInStream build() {
            return new SingleGenerationInStream(id, text, index, additionalProperties);
        }
    }
}

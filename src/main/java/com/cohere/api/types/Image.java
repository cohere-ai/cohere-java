/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Image.Builder.class)
public final class Image {
    private final long width;

    private final long height;

    private final String format;

    private final long bitDepth;

    private final Map<String, Object> additionalProperties;

    private Image(long width, long height, String format, long bitDepth, Map<String, Object> additionalProperties) {
        this.width = width;
        this.height = height;
        this.format = format;
        this.bitDepth = bitDepth;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Width of the image in pixels
     */
    @JsonProperty("width")
    public long getWidth() {
        return width;
    }

    /**
     * @return Height of the image in pixels
     */
    @JsonProperty("height")
    public long getHeight() {
        return height;
    }

    /**
     * @return Format of the image
     */
    @JsonProperty("format")
    public String getFormat() {
        return format;
    }

    /**
     * @return Bit depth of the image
     */
    @JsonProperty("bit_depth")
    public long getBitDepth() {
        return bitDepth;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Image && equalTo((Image) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Image other) {
        return width == other.width
                && height == other.height
                && format.equals(other.format)
                && bitDepth == other.bitDepth;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.width, this.height, this.format, this.bitDepth);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static WidthStage builder() {
        return new Builder();
    }

    public interface WidthStage {
        HeightStage width(long width);

        Builder from(Image other);
    }

    public interface HeightStage {
        FormatStage height(long height);
    }

    public interface FormatStage {
        BitDepthStage format(String format);
    }

    public interface BitDepthStage {
        _FinalStage bitDepth(long bitDepth);
    }

    public interface _FinalStage {
        Image build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements WidthStage, HeightStage, FormatStage, BitDepthStage, _FinalStage {
        private long width;

        private long height;

        private String format;

        private long bitDepth;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Image other) {
            width(other.getWidth());
            height(other.getHeight());
            format(other.getFormat());
            bitDepth(other.getBitDepth());
            return this;
        }

        /**
         * <p>Width of the image in pixels</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("width")
        public HeightStage width(long width) {
            this.width = width;
            return this;
        }

        /**
         * <p>Height of the image in pixels</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("height")
        public FormatStage height(long height) {
            this.height = height;
            return this;
        }

        /**
         * <p>Format of the image</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("format")
        public BitDepthStage format(String format) {
            this.format = format;
            return this;
        }

        /**
         * <p>Bit depth of the image</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("bit_depth")
        public _FinalStage bitDepth(long bitDepth) {
            this.bitDepth = bitDepth;
            return this;
        }

        @java.lang.Override
        public Image build() {
            return new Image(width, height, format, bitDepth, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.v2.types;

import com.cohere.api.core.ObjectMappers;
import com.cohere.api.types.EmbeddingType;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Images.Builder.class)
public final class Images {
    private final List<String> images;

    private final String model;

    private final Optional<List<EmbeddingType>> embeddingTypes;

    private final Map<String, Object> additionalProperties;

    private Images(
            List<String> images,
            String model,
            Optional<List<EmbeddingType>> embeddingTypes,
            Map<String, Object> additionalProperties) {
        this.images = images;
        this.model = model;
        this.embeddingTypes = embeddingTypes;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return An array of image data URIs for the model to embed. Maximum number of images per call is <code>1</code>.
     * The image must be a valid <a href="https://developer.mozilla.org/en-US/docs/Web/URI/Schemes/data">data URI</a>. The image must be in either <code>image/jpeg</code> or <code>image/png</code> format and has a maximum size of 5MB.
     */
    @JsonProperty("images")
    public List<String> getImages() {
        return images;
    }

    /**
     * @return Defaults to embed-english-v2.0
     * The identifier of the model. Smaller &quot;light&quot; models are faster, while larger models will perform better. <a href="/docs/training-custom-models">Custom models</a> can also be supplied with their full ID.
     * Available models and corresponding embedding dimensions:
     * <ul>
     * <li><code>embed-english-v3.0</code> 1024</li>
     * <li><code>embed-multilingual-v3.0</code> 1024</li>
     * <li><code>embed-english-light-v3.0</code> 384</li>
     * <li><code>embed-multilingual-light-v3.0</code> 384</li>
     * <li><code>embed-english-v2.0</code> 4096</li>
     * <li><code>embed-english-light-v2.0</code> 1024</li>
     * <li><code>embed-multilingual-v2.0</code> 768</li>
     * </ul>
     */
    @JsonProperty("model")
    public String getModel() {
        return model;
    }

    /**
     * @return Specifies the types of embeddings you want to get back. Not required and default is None, which returns the Embed Floats response type. Can be one or more of the following types.
     * <ul>
     * <li><code>&quot;float&quot;</code>: Use this when you want to get back the default float embeddings. Valid for all models.</li>
     * <li><code>&quot;int8&quot;</code>: Use this when you want to get back signed int8 embeddings. Valid for only v3 models.</li>
     * <li><code>&quot;uint8&quot;</code>: Use this when you want to get back unsigned int8 embeddings. Valid for only v3 models.</li>
     * <li><code>&quot;binary&quot;</code>: Use this when you want to get back signed binary embeddings. Valid for only v3 models.</li>
     * <li><code>&quot;ubinary&quot;</code>: Use this when you want to get back unsigned binary embeddings. Valid for only v3 models.</li>
     * </ul>
     */
    @JsonProperty("embedding_types")
    public Optional<List<EmbeddingType>> getEmbeddingTypes() {
        return embeddingTypes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Images && equalTo((Images) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Images other) {
        return images.equals(other.images) && model.equals(other.model) && embeddingTypes.equals(other.embeddingTypes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.images, this.model, this.embeddingTypes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ModelStage builder() {
        return new Builder();
    }

    public interface ModelStage {
        _FinalStage model(String model);

        Builder from(Images other);
    }

    public interface _FinalStage {
        Images build();

        _FinalStage images(List<String> images);

        _FinalStage addImages(String images);

        _FinalStage addAllImages(List<String> images);

        _FinalStage embeddingTypes(Optional<List<EmbeddingType>> embeddingTypes);

        _FinalStage embeddingTypes(List<EmbeddingType> embeddingTypes);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ModelStage, _FinalStage {
        private String model;

        private Optional<List<EmbeddingType>> embeddingTypes = Optional.empty();

        private List<String> images = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Images other) {
            images(other.getImages());
            model(other.getModel());
            embeddingTypes(other.getEmbeddingTypes());
            return this;
        }

        /**
         * <p>Defaults to embed-english-v2.0
         * The identifier of the model. Smaller &quot;light&quot; models are faster, while larger models will perform better. <a href="/docs/training-custom-models">Custom models</a> can also be supplied with their full ID.
         * Available models and corresponding embedding dimensions:</p>
         * <ul>
         * <li><code>embed-english-v3.0</code> 1024</li>
         * <li><code>embed-multilingual-v3.0</code> 1024</li>
         * <li><code>embed-english-light-v3.0</code> 384</li>
         * <li><code>embed-multilingual-light-v3.0</code> 384</li>
         * <li><code>embed-english-v2.0</code> 4096</li>
         * <li><code>embed-english-light-v2.0</code> 1024</li>
         * <li><code>embed-multilingual-v2.0</code> 768</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("model")
        public _FinalStage model(String model) {
            this.model = model;
            return this;
        }

        /**
         * <p>Specifies the types of embeddings you want to get back. Not required and default is None, which returns the Embed Floats response type. Can be one or more of the following types.</p>
         * <ul>
         * <li><code>&quot;float&quot;</code>: Use this when you want to get back the default float embeddings. Valid for all models.</li>
         * <li><code>&quot;int8&quot;</code>: Use this when you want to get back signed int8 embeddings. Valid for only v3 models.</li>
         * <li><code>&quot;uint8&quot;</code>: Use this when you want to get back unsigned int8 embeddings. Valid for only v3 models.</li>
         * <li><code>&quot;binary&quot;</code>: Use this when you want to get back signed binary embeddings. Valid for only v3 models.</li>
         * <li><code>&quot;ubinary&quot;</code>: Use this when you want to get back unsigned binary embeddings. Valid for only v3 models.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage embeddingTypes(List<EmbeddingType> embeddingTypes) {
            this.embeddingTypes = Optional.of(embeddingTypes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "embedding_types", nulls = Nulls.SKIP)
        public _FinalStage embeddingTypes(Optional<List<EmbeddingType>> embeddingTypes) {
            this.embeddingTypes = embeddingTypes;
            return this;
        }

        /**
         * <p>An array of image data URIs for the model to embed. Maximum number of images per call is <code>1</code>.
         * The image must be a valid <a href="https://developer.mozilla.org/en-US/docs/Web/URI/Schemes/data">data URI</a>. The image must be in either <code>image/jpeg</code> or <code>image/png</code> format and has a maximum size of 5MB.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllImages(List<String> images) {
            this.images.addAll(images);
            return this;
        }

        /**
         * <p>An array of image data URIs for the model to embed. Maximum number of images per call is <code>1</code>.
         * The image must be a valid <a href="https://developer.mozilla.org/en-US/docs/Web/URI/Schemes/data">data URI</a>. The image must be in either <code>image/jpeg</code> or <code>image/png</code> format and has a maximum size of 5MB.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addImages(String images) {
            this.images.add(images);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "images", nulls = Nulls.SKIP)
        public _FinalStage images(List<String> images) {
            this.images.clear();
            this.images.addAll(images);
            return this;
        }

        @java.lang.Override
        public Images build() {
            return new Images(images, model, embeddingTypes, additionalProperties);
        }
    }
}

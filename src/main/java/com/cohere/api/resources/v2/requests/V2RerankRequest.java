/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.v2.requests;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = V2RerankRequest.Builder.class)
public final class V2RerankRequest {
    private final String model;

    private final String query;

    private final List<String> documents;

    private final Optional<Integer> topN;

    private final Optional<Integer> maxTokensPerDoc;

    private final Map<String, Object> additionalProperties;

    private V2RerankRequest(
            String model,
            String query,
            List<String> documents,
            Optional<Integer> topN,
            Optional<Integer> maxTokensPerDoc,
            Map<String, Object> additionalProperties) {
        this.model = model;
        this.query = query;
        this.documents = documents;
        this.topN = topN;
        this.maxTokensPerDoc = maxTokensPerDoc;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The identifier of the model to use, eg <code>rerank-v3.5</code>.
     */
    @JsonProperty("model")
    public String getModel() {
        return model;
    }

    /**
     * @return The search query
     */
    @JsonProperty("query")
    public String getQuery() {
        return query;
    }

    /**
     * @return A list of texts that will be compared to the <code>query</code>.
     * For optimal performance we recommend against sending more than 1,000 documents in a single request.
     * <p><strong>Note</strong>: long documents will automatically be truncated to the value of <code>max_tokens_per_doc</code>.</p>
     * <p><strong>Note</strong>: structured data should be formatted as YAML strings for best performance.</p>
     */
    @JsonProperty("documents")
    public List<String> getDocuments() {
        return documents;
    }

    /**
     * @return Limits the number of returned rerank results to the specified value. If not passed, all the rerank results will be returned.
     */
    @JsonProperty("top_n")
    public Optional<Integer> getTopN() {
        return topN;
    }

    /**
     * @return Defaults to <code>4096</code>. Long documents will be automatically truncated to the specified number of tokens.
     */
    @JsonProperty("max_tokens_per_doc")
    public Optional<Integer> getMaxTokensPerDoc() {
        return maxTokensPerDoc;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof V2RerankRequest && equalTo((V2RerankRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(V2RerankRequest other) {
        return model.equals(other.model)
                && query.equals(other.query)
                && documents.equals(other.documents)
                && topN.equals(other.topN)
                && maxTokensPerDoc.equals(other.maxTokensPerDoc);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.model, this.query, this.documents, this.topN, this.maxTokensPerDoc);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ModelStage builder() {
        return new Builder();
    }

    public interface ModelStage {
        /**
         * <p>The identifier of the model to use, eg <code>rerank-v3.5</code>.</p>
         */
        QueryStage model(@NotNull String model);

        Builder from(V2RerankRequest other);
    }

    public interface QueryStage {
        /**
         * <p>The search query</p>
         */
        _FinalStage query(@NotNull String query);
    }

    public interface _FinalStage {
        V2RerankRequest build();

        /**
         * <p>A list of texts that will be compared to the <code>query</code>.
         * For optimal performance we recommend against sending more than 1,000 documents in a single request.</p>
         * <p><strong>Note</strong>: long documents will automatically be truncated to the value of <code>max_tokens_per_doc</code>.</p>
         * <p><strong>Note</strong>: structured data should be formatted as YAML strings for best performance.</p>
         */
        _FinalStage documents(List<String> documents);

        _FinalStage addDocuments(String documents);

        _FinalStage addAllDocuments(List<String> documents);

        /**
         * <p>Limits the number of returned rerank results to the specified value. If not passed, all the rerank results will be returned.</p>
         */
        _FinalStage topN(Optional<Integer> topN);

        _FinalStage topN(Integer topN);

        /**
         * <p>Defaults to <code>4096</code>. Long documents will be automatically truncated to the specified number of tokens.</p>
         */
        _FinalStage maxTokensPerDoc(Optional<Integer> maxTokensPerDoc);

        _FinalStage maxTokensPerDoc(Integer maxTokensPerDoc);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ModelStage, QueryStage, _FinalStage {
        private String model;

        private String query;

        private Optional<Integer> maxTokensPerDoc = Optional.empty();

        private Optional<Integer> topN = Optional.empty();

        private List<String> documents = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(V2RerankRequest other) {
            model(other.getModel());
            query(other.getQuery());
            documents(other.getDocuments());
            topN(other.getTopN());
            maxTokensPerDoc(other.getMaxTokensPerDoc());
            return this;
        }

        /**
         * <p>The identifier of the model to use, eg <code>rerank-v3.5</code>.</p>
         * <p>The identifier of the model to use, eg <code>rerank-v3.5</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("model")
        public QueryStage model(@NotNull String model) {
            this.model = Objects.requireNonNull(model, "model must not be null");
            return this;
        }

        /**
         * <p>The search query</p>
         * <p>The search query</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("query")
        public _FinalStage query(@NotNull String query) {
            this.query = Objects.requireNonNull(query, "query must not be null");
            return this;
        }

        /**
         * <p>Defaults to <code>4096</code>. Long documents will be automatically truncated to the specified number of tokens.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage maxTokensPerDoc(Integer maxTokensPerDoc) {
            this.maxTokensPerDoc = Optional.ofNullable(maxTokensPerDoc);
            return this;
        }

        /**
         * <p>Defaults to <code>4096</code>. Long documents will be automatically truncated to the specified number of tokens.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "max_tokens_per_doc", nulls = Nulls.SKIP)
        public _FinalStage maxTokensPerDoc(Optional<Integer> maxTokensPerDoc) {
            this.maxTokensPerDoc = maxTokensPerDoc;
            return this;
        }

        /**
         * <p>Limits the number of returned rerank results to the specified value. If not passed, all the rerank results will be returned.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage topN(Integer topN) {
            this.topN = Optional.ofNullable(topN);
            return this;
        }

        /**
         * <p>Limits the number of returned rerank results to the specified value. If not passed, all the rerank results will be returned.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "top_n", nulls = Nulls.SKIP)
        public _FinalStage topN(Optional<Integer> topN) {
            this.topN = topN;
            return this;
        }

        /**
         * <p>A list of texts that will be compared to the <code>query</code>.
         * For optimal performance we recommend against sending more than 1,000 documents in a single request.</p>
         * <p><strong>Note</strong>: long documents will automatically be truncated to the value of <code>max_tokens_per_doc</code>.</p>
         * <p><strong>Note</strong>: structured data should be formatted as YAML strings for best performance.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllDocuments(List<String> documents) {
            this.documents.addAll(documents);
            return this;
        }

        /**
         * <p>A list of texts that will be compared to the <code>query</code>.
         * For optimal performance we recommend against sending more than 1,000 documents in a single request.</p>
         * <p><strong>Note</strong>: long documents will automatically be truncated to the value of <code>max_tokens_per_doc</code>.</p>
         * <p><strong>Note</strong>: structured data should be formatted as YAML strings for best performance.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addDocuments(String documents) {
            this.documents.add(documents);
            return this;
        }

        /**
         * <p>A list of texts that will be compared to the <code>query</code>.
         * For optimal performance we recommend against sending more than 1,000 documents in a single request.</p>
         * <p><strong>Note</strong>: long documents will automatically be truncated to the value of <code>max_tokens_per_doc</code>.</p>
         * <p><strong>Note</strong>: structured data should be formatted as YAML strings for best performance.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "documents", nulls = Nulls.SKIP)
        public _FinalStage documents(List<String> documents) {
            this.documents.clear();
            this.documents.addAll(documents);
            return this;
        }

        @java.lang.Override
        public V2RerankRequest build() {
            return new V2RerankRequest(model, query, documents, topN, maxTokensPerDoc, additionalProperties);
        }
    }
}

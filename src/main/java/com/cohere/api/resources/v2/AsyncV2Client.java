/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.v2;

import com.cohere.api.core.ClientOptions;
import com.cohere.api.core.RequestOptions;
import com.cohere.api.resources.v2.requests.V2ChatRequest;
import com.cohere.api.resources.v2.requests.V2ChatStreamRequest;
import com.cohere.api.resources.v2.requests.V2EmbedRequest;
import com.cohere.api.resources.v2.requests.V2RerankRequest;
import com.cohere.api.resources.v2.types.V2ChatResponse;
import com.cohere.api.resources.v2.types.V2ChatStreamResponse;
import com.cohere.api.resources.v2.types.V2RerankResponse;
import com.cohere.api.types.EmbedByTypeResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncV2Client {
    protected final ClientOptions clientOptions;

    private final AsyncRawV2Client rawClient;

    public AsyncV2Client(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawV2Client(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawV2Client withRawResponse() {
        return this.rawClient;
    }

    /**
     * Generates a text response to a user message. To learn how to use the Chat API and RAG follow our <a href="https://docs.cohere.com/v2/docs/chat-api">Text Generation guides</a>.
     * <p>Follow the <a href="https://docs.cohere.com/v2/docs/migrating-v1-to-v2">Migration Guide</a> for instructions on moving from API v1 to API v2.</p>
     */
    public CompletableFuture<Iterable<V2ChatStreamResponse>> chatStream(V2ChatStreamRequest request) {
        return this.rawClient.chatStream(request).thenApply(response -> response.body());
    }

    /**
     * Generates a text response to a user message. To learn how to use the Chat API and RAG follow our <a href="https://docs.cohere.com/v2/docs/chat-api">Text Generation guides</a>.
     * <p>Follow the <a href="https://docs.cohere.com/v2/docs/migrating-v1-to-v2">Migration Guide</a> for instructions on moving from API v1 to API v2.</p>
     */
    public CompletableFuture<Iterable<V2ChatStreamResponse>> chatStream(
            V2ChatStreamRequest request, RequestOptions requestOptions) {
        return this.rawClient.chatStream(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generates a text response to a user message and streams it down, token by token. To learn how to use the Chat API with streaming follow our <a href="https://docs.cohere.com/v2/docs/chat-api">Text Generation guides</a>.
     * <p>Follow the <a href="https://docs.cohere.com/v2/docs/migrating-v1-to-v2">Migration Guide</a> for instructions on moving from API v1 to API v2.</p>
     */
    public CompletableFuture<V2ChatResponse> chat(V2ChatRequest request) {
        return this.rawClient.chat(request).thenApply(response -> response.body());
    }

    /**
     * Generates a text response to a user message and streams it down, token by token. To learn how to use the Chat API with streaming follow our <a href="https://docs.cohere.com/v2/docs/chat-api">Text Generation guides</a>.
     * <p>Follow the <a href="https://docs.cohere.com/v2/docs/migrating-v1-to-v2">Migration Guide</a> for instructions on moving from API v1 to API v2.</p>
     */
    public CompletableFuture<V2ChatResponse> chat(V2ChatRequest request, RequestOptions requestOptions) {
        return this.rawClient.chat(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint returns text embeddings. An embedding is a list of floating point numbers that captures semantic information about the text that it represents.
     * <p>Embeddings can be used to create text classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.</p>
     * <p>If you want to learn more how to use the embedding model, have a look at the <a href="https://docs.cohere.com/docs/semantic-search">Semantic Search Guide</a>.</p>
     */
    public CompletableFuture<EmbedByTypeResponse> embed(V2EmbedRequest request) {
        return this.rawClient.embed(request).thenApply(response -> response.body());
    }

    /**
     * This endpoint returns text embeddings. An embedding is a list of floating point numbers that captures semantic information about the text that it represents.
     * <p>Embeddings can be used to create text classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.</p>
     * <p>If you want to learn more how to use the embedding model, have a look at the <a href="https://docs.cohere.com/docs/semantic-search">Semantic Search Guide</a>.</p>
     */
    public CompletableFuture<EmbedByTypeResponse> embed(V2EmbedRequest request, RequestOptions requestOptions) {
        return this.rawClient.embed(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint takes in a query and a list of texts and produces an ordered array with each text assigned a relevance score.
     */
    public CompletableFuture<V2RerankResponse> rerank(V2RerankRequest request) {
        return this.rawClient.rerank(request).thenApply(response -> response.body());
    }

    /**
     * This endpoint takes in a query and a list of texts and produces an ordered array with each text assigned a relevance score.
     */
    public CompletableFuture<V2RerankResponse> rerank(V2RerankRequest request, RequestOptions requestOptions) {
        return this.rawClient.rerank(request, requestOptions).thenApply(response -> response.body());
    }
}

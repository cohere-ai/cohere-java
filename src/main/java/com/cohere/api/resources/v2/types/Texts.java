/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.v2.types;

import com.cohere.api.core.ObjectMappers;
import com.cohere.api.types.EmbeddingType;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Texts.Builder.class)
public final class Texts {
    private final List<String> texts;

    private final String model;

    private final Optional<List<EmbeddingType>> embeddingTypes;

    private final Optional<TextsTruncate> truncate;

    private final Map<String, Object> additionalProperties;

    private Texts(
            List<String> texts,
            String model,
            Optional<List<EmbeddingType>> embeddingTypes,
            Optional<TextsTruncate> truncate,
            Map<String, Object> additionalProperties) {
        this.texts = texts;
        this.model = model;
        this.embeddingTypes = embeddingTypes;
        this.truncate = truncate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return An array of strings for the model to embed. Maximum number of texts per call is <code>96</code>. We recommend reducing the length of each text to be under <code>512</code> tokens for optimal quality.
     */
    @JsonProperty("texts")
    public List<String> getTexts() {
        return texts;
    }

    /**
     * @return Defaults to embed-english-v2.0
     * <p>The identifier of the model. Smaller &quot;light&quot; models are faster, while larger models will perform better. <a href="/docs/training-custom-models">Custom models</a> can also be supplied with their full ID.</p>
     * <p>Available models and corresponding embedding dimensions:</p>
     * <ul>
     * <li>
     * <p><code>embed-english-v3.0</code> 1024</p>
     * </li>
     * <li>
     * <p><code>embed-multilingual-v3.0</code> 1024</p>
     * </li>
     * <li>
     * <p><code>embed-english-light-v3.0</code> 384</p>
     * </li>
     * <li>
     * <p><code>embed-multilingual-light-v3.0</code> 384</p>
     * </li>
     * <li>
     * <p><code>embed-english-v2.0</code> 4096</p>
     * </li>
     * <li>
     * <p><code>embed-english-light-v2.0</code> 1024</p>
     * </li>
     * <li>
     * <p><code>embed-multilingual-v2.0</code> 768</p>
     * </li>
     * </ul>
     */
    @JsonProperty("model")
    public String getModel() {
        return model;
    }

    /**
     * @return Specifies the types of embeddings you want to get back. Not required and default is None, which returns the Embed Floats response type. Can be one or more of the following types.
     * <ul>
     * <li><code>&quot;float&quot;</code>: Use this when you want to get back the default float embeddings. Valid for all models.</li>
     * <li><code>&quot;int8&quot;</code>: Use this when you want to get back signed int8 embeddings. Valid for only v3 models.</li>
     * <li><code>&quot;uint8&quot;</code>: Use this when you want to get back unsigned int8 embeddings. Valid for only v3 models.</li>
     * <li><code>&quot;binary&quot;</code>: Use this when you want to get back signed binary embeddings. Valid for only v3 models.</li>
     * <li><code>&quot;ubinary&quot;</code>: Use this when you want to get back unsigned binary embeddings. Valid for only v3 models.</li>
     * </ul>
     */
    @JsonProperty("embedding_types")
    public Optional<List<EmbeddingType>> getEmbeddingTypes() {
        return embeddingTypes;
    }

    /**
     * @return One of <code>NONE|START|END</code> to specify how the API will handle inputs longer than the maximum token length.
     * <p>Passing <code>START</code> will discard the start of the input. <code>END</code> will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.</p>
     * <p>If <code>NONE</code> is selected, when the input exceeds the maximum input token length an error will be returned.</p>
     */
    @JsonProperty("truncate")
    public Optional<TextsTruncate> getTruncate() {
        return truncate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Texts && equalTo((Texts) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Texts other) {
        return texts.equals(other.texts)
                && model.equals(other.model)
                && embeddingTypes.equals(other.embeddingTypes)
                && truncate.equals(other.truncate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.texts, this.model, this.embeddingTypes, this.truncate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ModelStage builder() {
        return new Builder();
    }

    public interface ModelStage {
        _FinalStage model(String model);

        Builder from(Texts other);
    }

    public interface _FinalStage {
        Texts build();

        _FinalStage texts(List<String> texts);

        _FinalStage addTexts(String texts);

        _FinalStage addAllTexts(List<String> texts);

        _FinalStage embeddingTypes(Optional<List<EmbeddingType>> embeddingTypes);

        _FinalStage embeddingTypes(List<EmbeddingType> embeddingTypes);

        _FinalStage truncate(Optional<TextsTruncate> truncate);

        _FinalStage truncate(TextsTruncate truncate);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ModelStage, _FinalStage {
        private String model;

        private Optional<TextsTruncate> truncate = Optional.empty();

        private Optional<List<EmbeddingType>> embeddingTypes = Optional.empty();

        private List<String> texts = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Texts other) {
            texts(other.getTexts());
            model(other.getModel());
            embeddingTypes(other.getEmbeddingTypes());
            truncate(other.getTruncate());
            return this;
        }

        /**
         * <p>Defaults to embed-english-v2.0</p>
         * <p>The identifier of the model. Smaller &quot;light&quot; models are faster, while larger models will perform better. <a href="/docs/training-custom-models">Custom models</a> can also be supplied with their full ID.</p>
         * <p>Available models and corresponding embedding dimensions:</p>
         * <ul>
         * <li>
         * <p><code>embed-english-v3.0</code> 1024</p>
         * </li>
         * <li>
         * <p><code>embed-multilingual-v3.0</code> 1024</p>
         * </li>
         * <li>
         * <p><code>embed-english-light-v3.0</code> 384</p>
         * </li>
         * <li>
         * <p><code>embed-multilingual-light-v3.0</code> 384</p>
         * </li>
         * <li>
         * <p><code>embed-english-v2.0</code> 4096</p>
         * </li>
         * <li>
         * <p><code>embed-english-light-v2.0</code> 1024</p>
         * </li>
         * <li>
         * <p><code>embed-multilingual-v2.0</code> 768</p>
         * </li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("model")
        public _FinalStage model(String model) {
            this.model = model;
            return this;
        }

        /**
         * <p>One of <code>NONE|START|END</code> to specify how the API will handle inputs longer than the maximum token length.</p>
         * <p>Passing <code>START</code> will discard the start of the input. <code>END</code> will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.</p>
         * <p>If <code>NONE</code> is selected, when the input exceeds the maximum input token length an error will be returned.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage truncate(TextsTruncate truncate) {
            this.truncate = Optional.of(truncate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "truncate", nulls = Nulls.SKIP)
        public _FinalStage truncate(Optional<TextsTruncate> truncate) {
            this.truncate = truncate;
            return this;
        }

        /**
         * <p>Specifies the types of embeddings you want to get back. Not required and default is None, which returns the Embed Floats response type. Can be one or more of the following types.</p>
         * <ul>
         * <li><code>&quot;float&quot;</code>: Use this when you want to get back the default float embeddings. Valid for all models.</li>
         * <li><code>&quot;int8&quot;</code>: Use this when you want to get back signed int8 embeddings. Valid for only v3 models.</li>
         * <li><code>&quot;uint8&quot;</code>: Use this when you want to get back unsigned int8 embeddings. Valid for only v3 models.</li>
         * <li><code>&quot;binary&quot;</code>: Use this when you want to get back signed binary embeddings. Valid for only v3 models.</li>
         * <li><code>&quot;ubinary&quot;</code>: Use this when you want to get back unsigned binary embeddings. Valid for only v3 models.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage embeddingTypes(List<EmbeddingType> embeddingTypes) {
            this.embeddingTypes = Optional.of(embeddingTypes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "embedding_types", nulls = Nulls.SKIP)
        public _FinalStage embeddingTypes(Optional<List<EmbeddingType>> embeddingTypes) {
            this.embeddingTypes = embeddingTypes;
            return this;
        }

        /**
         * <p>An array of strings for the model to embed. Maximum number of texts per call is <code>96</code>. We recommend reducing the length of each text to be under <code>512</code> tokens for optimal quality.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllTexts(List<String> texts) {
            this.texts.addAll(texts);
            return this;
        }

        /**
         * <p>An array of strings for the model to embed. Maximum number of texts per call is <code>96</code>. We recommend reducing the length of each text to be under <code>512</code> tokens for optimal quality.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addTexts(String texts) {
            this.texts.add(texts);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "texts", nulls = Nulls.SKIP)
        public _FinalStage texts(List<String> texts) {
            this.texts.clear();
            this.texts.addAll(texts);
            return this;
        }

        @java.lang.Override
        public Texts build() {
            return new Texts(texts, model, embeddingTypes, truncate, additionalProperties);
        }
    }
}

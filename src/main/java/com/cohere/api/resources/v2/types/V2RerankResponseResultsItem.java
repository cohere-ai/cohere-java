/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.v2.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = V2RerankResponseResultsItem.Builder.class)
public final class V2RerankResponseResultsItem {
    private final int index;

    private final float relevanceScore;

    private final Map<String, Object> additionalProperties;

    private V2RerankResponseResultsItem(int index, float relevanceScore, Map<String, Object> additionalProperties) {
        this.index = index;
        this.relevanceScore = relevanceScore;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Corresponds to the index in the original list of documents to which the ranked document belongs. (i.e. if the first value in the <code>results</code> object has an <code>index</code> value of 3, it means in the list of documents passed in, the document at <code>index=3</code> had the highest relevance)
     */
    @JsonProperty("index")
    public int getIndex() {
        return index;
    }

    /**
     * @return Relevance scores are normalized to be in the range <code>[0, 1]</code>. Scores close to <code>1</code> indicate a high relevance to the query, and scores closer to <code>0</code> indicate low relevance. It is not accurate to assume a score of 0.9 means the document is 2x more relevant than a document with a score of 0.45
     */
    @JsonProperty("relevance_score")
    public float getRelevanceScore() {
        return relevanceScore;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof V2RerankResponseResultsItem && equalTo((V2RerankResponseResultsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(V2RerankResponseResultsItem other) {
        return index == other.index && relevanceScore == other.relevanceScore;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.index, this.relevanceScore);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IndexStage builder() {
        return new Builder();
    }

    public interface IndexStage {
        /**
         * <p>Corresponds to the index in the original list of documents to which the ranked document belongs. (i.e. if the first value in the <code>results</code> object has an <code>index</code> value of 3, it means in the list of documents passed in, the document at <code>index=3</code> had the highest relevance)</p>
         */
        RelevanceScoreStage index(int index);

        Builder from(V2RerankResponseResultsItem other);
    }

    public interface RelevanceScoreStage {
        /**
         * <p>Relevance scores are normalized to be in the range <code>[0, 1]</code>. Scores close to <code>1</code> indicate a high relevance to the query, and scores closer to <code>0</code> indicate low relevance. It is not accurate to assume a score of 0.9 means the document is 2x more relevant than a document with a score of 0.45</p>
         */
        _FinalStage relevanceScore(float relevanceScore);
    }

    public interface _FinalStage {
        V2RerankResponseResultsItem build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IndexStage, RelevanceScoreStage, _FinalStage {
        private int index;

        private float relevanceScore;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(V2RerankResponseResultsItem other) {
            index(other.getIndex());
            relevanceScore(other.getRelevanceScore());
            return this;
        }

        /**
         * <p>Corresponds to the index in the original list of documents to which the ranked document belongs. (i.e. if the first value in the <code>results</code> object has an <code>index</code> value of 3, it means in the list of documents passed in, the document at <code>index=3</code> had the highest relevance)</p>
         * <p>Corresponds to the index in the original list of documents to which the ranked document belongs. (i.e. if the first value in the <code>results</code> object has an <code>index</code> value of 3, it means in the list of documents passed in, the document at <code>index=3</code> had the highest relevance)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("index")
        public RelevanceScoreStage index(int index) {
            this.index = index;
            return this;
        }

        /**
         * <p>Relevance scores are normalized to be in the range <code>[0, 1]</code>. Scores close to <code>1</code> indicate a high relevance to the query, and scores closer to <code>0</code> indicate low relevance. It is not accurate to assume a score of 0.9 means the document is 2x more relevant than a document with a score of 0.45</p>
         * <p>Relevance scores are normalized to be in the range <code>[0, 1]</code>. Scores close to <code>1</code> indicate a high relevance to the query, and scores closer to <code>0</code> indicate low relevance. It is not accurate to assume a score of 0.9 means the document is 2x more relevant than a document with a score of 0.45</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("relevance_score")
        public _FinalStage relevanceScore(float relevanceScore) {
            this.relevanceScore = relevanceScore;
            return this;
        }

        @java.lang.Override
        public V2RerankResponseResultsItem build() {
            return new V2RerankResponseResultsItem(index, relevanceScore, additionalProperties);
        }
    }
}

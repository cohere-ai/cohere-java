/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.v2.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class V2EmbedRequest {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private V2EmbedRequest(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static V2EmbedRequest searchDocument(Texts value) {
        return new V2EmbedRequest(new SearchDocumentValue(value));
    }

    public static V2EmbedRequest searchQuery(Texts value) {
        return new V2EmbedRequest(new SearchQueryValue(value));
    }

    public static V2EmbedRequest classification(Texts value) {
        return new V2EmbedRequest(new ClassificationValue(value));
    }

    public static V2EmbedRequest clustering(Texts value) {
        return new V2EmbedRequest(new ClusteringValue(value));
    }

    public static V2EmbedRequest image(Images value) {
        return new V2EmbedRequest(new ImageValue(value));
    }

    public boolean isSearchDocument() {
        return value instanceof SearchDocumentValue;
    }

    public boolean isSearchQuery() {
        return value instanceof SearchQueryValue;
    }

    public boolean isClassification() {
        return value instanceof ClassificationValue;
    }

    public boolean isClustering() {
        return value instanceof ClusteringValue;
    }

    public boolean isImage() {
        return value instanceof ImageValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<Texts> getSearchDocument() {
        if (isSearchDocument()) {
            return Optional.of(((SearchDocumentValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Texts> getSearchQuery() {
        if (isSearchQuery()) {
            return Optional.of(((SearchQueryValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Texts> getClassification() {
        if (isClassification()) {
            return Optional.of(((ClassificationValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Texts> getClustering() {
        if (isClustering()) {
            return Optional.of(((ClusteringValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Images> getImage() {
        if (isImage()) {
            return Optional.of(((ImageValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitSearchDocument(Texts searchDocument);

        T visitSearchQuery(Texts searchQuery);

        T visitClassification(Texts classification);

        T visitClustering(Texts clustering);

        T visitImage(Images image);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(
            use = JsonTypeInfo.Id.NAME,
            property = "input_type",
            visible = true,
            defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(SearchDocumentValue.class),
        @JsonSubTypes.Type(SearchQueryValue.class),
        @JsonSubTypes.Type(ClassificationValue.class),
        @JsonSubTypes.Type(ClusteringValue.class),
        @JsonSubTypes.Type(ImageValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("search_document")
    private static final class SearchDocumentValue implements Value {
        @JsonUnwrapped
        private Texts value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SearchDocumentValue() {}

        private SearchDocumentValue(Texts value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSearchDocument(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SearchDocumentValue && equalTo((SearchDocumentValue) other);
        }

        private boolean equalTo(SearchDocumentValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "V2EmbedRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("search_query")
    private static final class SearchQueryValue implements Value {
        @JsonUnwrapped
        private Texts value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SearchQueryValue() {}

        private SearchQueryValue(Texts value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSearchQuery(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SearchQueryValue && equalTo((SearchQueryValue) other);
        }

        private boolean equalTo(SearchQueryValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "V2EmbedRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("classification")
    private static final class ClassificationValue implements Value {
        @JsonUnwrapped
        private Texts value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ClassificationValue() {}

        private ClassificationValue(Texts value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitClassification(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ClassificationValue && equalTo((ClassificationValue) other);
        }

        private boolean equalTo(ClassificationValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "V2EmbedRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("clustering")
    private static final class ClusteringValue implements Value {
        @JsonUnwrapped
        private Texts value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ClusteringValue() {}

        private ClusteringValue(Texts value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitClustering(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ClusteringValue && equalTo((ClusteringValue) other);
        }

        private boolean equalTo(ClusteringValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "V2EmbedRequest{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("image")
    private static final class ImageValue implements Value {
        @JsonUnwrapped
        private Images value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ImageValue() {}

        private ImageValue(Images value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitImage(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ImageValue && equalTo((ImageValue) other);
        }

        private boolean equalTo(ImageValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "V2EmbedRequest{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "V2EmbedRequest{" + "type: " + type + ", value: " + value + "}";
        }
    }
}

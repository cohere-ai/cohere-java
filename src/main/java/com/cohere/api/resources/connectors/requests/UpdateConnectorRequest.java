/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.connectors.requests;

import com.cohere.api.core.ObjectMappers;
import com.cohere.api.types.CreateConnectorOAuth;
import com.cohere.api.types.CreateConnectorServiceAuth;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateConnectorRequest.Builder.class)
public final class UpdateConnectorRequest {
    private final Optional<String> name;

    private final Optional<String> url;

    private final Optional<List<String>> excludes;

    private final Optional<CreateConnectorOAuth> oauth;

    private final Optional<Boolean> active;

    private final Optional<Boolean> continueOnFailure;

    private final Optional<CreateConnectorServiceAuth> serviceAuth;

    private final Map<String, Object> additionalProperties;

    private UpdateConnectorRequest(
            Optional<String> name,
            Optional<String> url,
            Optional<List<String>> excludes,
            Optional<CreateConnectorOAuth> oauth,
            Optional<Boolean> active,
            Optional<Boolean> continueOnFailure,
            Optional<CreateConnectorServiceAuth> serviceAuth,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.url = url;
        this.excludes = excludes;
        this.oauth = oauth;
        this.active = active;
        this.continueOnFailure = continueOnFailure;
        this.serviceAuth = serviceAuth;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A human-readable name for the connector.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The URL of the connector that will be used to search for documents.
     */
    @JsonProperty("url")
    public Optional<String> getUrl() {
        return url;
    }

    /**
     * @return A list of fields to exclude from the prompt (fields remain in the document).
     */
    @JsonProperty("excludes")
    public Optional<List<String>> getExcludes() {
        return excludes;
    }

    /**
     * @return The OAuth 2.0 configuration for the connector. Cannot be specified if service_auth is specified.
     */
    @JsonProperty("oauth")
    public Optional<CreateConnectorOAuth> getOauth() {
        return oauth;
    }

    @JsonProperty("active")
    public Optional<Boolean> getActive() {
        return active;
    }

    @JsonProperty("continue_on_failure")
    public Optional<Boolean> getContinueOnFailure() {
        return continueOnFailure;
    }

    /**
     * @return The service to service authentication configuration for the connector. Cannot be specified if oauth is specified.
     */
    @JsonProperty("service_auth")
    public Optional<CreateConnectorServiceAuth> getServiceAuth() {
        return serviceAuth;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateConnectorRequest && equalTo((UpdateConnectorRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateConnectorRequest other) {
        return name.equals(other.name)
                && url.equals(other.url)
                && excludes.equals(other.excludes)
                && oauth.equals(other.oauth)
                && active.equals(other.active)
                && continueOnFailure.equals(other.continueOnFailure)
                && serviceAuth.equals(other.serviceAuth);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name, this.url, this.excludes, this.oauth, this.active, this.continueOnFailure, this.serviceAuth);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> url = Optional.empty();

        private Optional<List<String>> excludes = Optional.empty();

        private Optional<CreateConnectorOAuth> oauth = Optional.empty();

        private Optional<Boolean> active = Optional.empty();

        private Optional<Boolean> continueOnFailure = Optional.empty();

        private Optional<CreateConnectorServiceAuth> serviceAuth = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateConnectorRequest other) {
            name(other.getName());
            url(other.getUrl());
            excludes(other.getExcludes());
            oauth(other.getOauth());
            active(other.getActive());
            continueOnFailure(other.getContinueOnFailure());
            serviceAuth(other.getServiceAuth());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "url", nulls = Nulls.SKIP)
        public Builder url(Optional<String> url) {
            this.url = url;
            return this;
        }

        public Builder url(String url) {
            this.url = Optional.ofNullable(url);
            return this;
        }

        @JsonSetter(value = "excludes", nulls = Nulls.SKIP)
        public Builder excludes(Optional<List<String>> excludes) {
            this.excludes = excludes;
            return this;
        }

        public Builder excludes(List<String> excludes) {
            this.excludes = Optional.ofNullable(excludes);
            return this;
        }

        @JsonSetter(value = "oauth", nulls = Nulls.SKIP)
        public Builder oauth(Optional<CreateConnectorOAuth> oauth) {
            this.oauth = oauth;
            return this;
        }

        public Builder oauth(CreateConnectorOAuth oauth) {
            this.oauth = Optional.ofNullable(oauth);
            return this;
        }

        @JsonSetter(value = "active", nulls = Nulls.SKIP)
        public Builder active(Optional<Boolean> active) {
            this.active = active;
            return this;
        }

        public Builder active(Boolean active) {
            this.active = Optional.ofNullable(active);
            return this;
        }

        @JsonSetter(value = "continue_on_failure", nulls = Nulls.SKIP)
        public Builder continueOnFailure(Optional<Boolean> continueOnFailure) {
            this.continueOnFailure = continueOnFailure;
            return this;
        }

        public Builder continueOnFailure(Boolean continueOnFailure) {
            this.continueOnFailure = Optional.ofNullable(continueOnFailure);
            return this;
        }

        @JsonSetter(value = "service_auth", nulls = Nulls.SKIP)
        public Builder serviceAuth(Optional<CreateConnectorServiceAuth> serviceAuth) {
            this.serviceAuth = serviceAuth;
            return this;
        }

        public Builder serviceAuth(CreateConnectorServiceAuth serviceAuth) {
            this.serviceAuth = Optional.ofNullable(serviceAuth);
            return this;
        }

        public UpdateConnectorRequest build() {
            return new UpdateConnectorRequest(
                    name, url, excludes, oauth, active, continueOnFailure, serviceAuth, additionalProperties);
        }
    }
}

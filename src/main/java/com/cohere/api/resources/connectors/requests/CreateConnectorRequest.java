/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.connectors.requests;

import com.cohere.api.core.ObjectMappers;
import com.cohere.api.types.CreateConnectorOAuth;
import com.cohere.api.types.CreateConnectorServiceAuth;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateConnectorRequest.Builder.class)
public final class CreateConnectorRequest {
    private final String name;

    private final Optional<String> description;

    private final String url;

    private final Optional<List<String>> excludes;

    private final Optional<CreateConnectorOAuth> oauth;

    private final Optional<Boolean> active;

    private final Optional<Boolean> continueOnFailure;

    private final Optional<CreateConnectorServiceAuth> serviceAuth;

    private final Map<String, Object> additionalProperties;

    private CreateConnectorRequest(
            String name,
            Optional<String> description,
            String url,
            Optional<List<String>> excludes,
            Optional<CreateConnectorOAuth> oauth,
            Optional<Boolean> active,
            Optional<Boolean> continueOnFailure,
            Optional<CreateConnectorServiceAuth> serviceAuth,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.description = description;
        this.url = url;
        this.excludes = excludes;
        this.oauth = oauth;
        this.active = active;
        this.continueOnFailure = continueOnFailure;
        this.serviceAuth = serviceAuth;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A human-readable name for the connector.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return A description of the connector.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return The URL of the connector that will be used to search for documents.
     */
    @JsonProperty("url")
    public String getUrl() {
        return url;
    }

    /**
     * @return A list of fields to exclude from the prompt (fields remain in the document).
     */
    @JsonProperty("excludes")
    public Optional<List<String>> getExcludes() {
        return excludes;
    }

    /**
     * @return The OAuth 2.0 configuration for the connector. Cannot be specified if service_auth is specified.
     */
    @JsonProperty("oauth")
    public Optional<CreateConnectorOAuth> getOauth() {
        return oauth;
    }

    /**
     * @return Whether the connector is active or not.
     */
    @JsonProperty("active")
    public Optional<Boolean> getActive() {
        return active;
    }

    /**
     * @return Whether a chat request should continue or not if the request to this connector fails.
     */
    @JsonProperty("continue_on_failure")
    public Optional<Boolean> getContinueOnFailure() {
        return continueOnFailure;
    }

    /**
     * @return The service to service authentication configuration for the connector. Cannot be specified if oauth is specified.
     */
    @JsonProperty("service_auth")
    public Optional<CreateConnectorServiceAuth> getServiceAuth() {
        return serviceAuth;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateConnectorRequest && equalTo((CreateConnectorRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateConnectorRequest other) {
        return name.equals(other.name)
                && description.equals(other.description)
                && url.equals(other.url)
                && excludes.equals(other.excludes)
                && oauth.equals(other.oauth)
                && active.equals(other.active)
                && continueOnFailure.equals(other.continueOnFailure)
                && serviceAuth.equals(other.serviceAuth);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.description,
                this.url,
                this.excludes,
                this.oauth,
                this.active,
                this.continueOnFailure,
                this.serviceAuth);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>A human-readable name for the connector.</p>
         */
        UrlStage name(@NotNull String name);

        Builder from(CreateConnectorRequest other);
    }

    public interface UrlStage {
        /**
         * <p>The URL of the connector that will be used to search for documents.</p>
         */
        _FinalStage url(@NotNull String url);
    }

    public interface _FinalStage {
        CreateConnectorRequest build();

        /**
         * <p>A description of the connector.</p>
         */
        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        /**
         * <p>A list of fields to exclude from the prompt (fields remain in the document).</p>
         */
        _FinalStage excludes(Optional<List<String>> excludes);

        _FinalStage excludes(List<String> excludes);

        /**
         * <p>The OAuth 2.0 configuration for the connector. Cannot be specified if service_auth is specified.</p>
         */
        _FinalStage oauth(Optional<CreateConnectorOAuth> oauth);

        _FinalStage oauth(CreateConnectorOAuth oauth);

        /**
         * <p>Whether the connector is active or not.</p>
         */
        _FinalStage active(Optional<Boolean> active);

        _FinalStage active(Boolean active);

        /**
         * <p>Whether a chat request should continue or not if the request to this connector fails.</p>
         */
        _FinalStage continueOnFailure(Optional<Boolean> continueOnFailure);

        _FinalStage continueOnFailure(Boolean continueOnFailure);

        /**
         * <p>The service to service authentication configuration for the connector. Cannot be specified if oauth is specified.</p>
         */
        _FinalStage serviceAuth(Optional<CreateConnectorServiceAuth> serviceAuth);

        _FinalStage serviceAuth(CreateConnectorServiceAuth serviceAuth);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, UrlStage, _FinalStage {
        private String name;

        private String url;

        private Optional<CreateConnectorServiceAuth> serviceAuth = Optional.empty();

        private Optional<Boolean> continueOnFailure = Optional.empty();

        private Optional<Boolean> active = Optional.empty();

        private Optional<CreateConnectorOAuth> oauth = Optional.empty();

        private Optional<List<String>> excludes = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateConnectorRequest other) {
            name(other.getName());
            description(other.getDescription());
            url(other.getUrl());
            excludes(other.getExcludes());
            oauth(other.getOauth());
            active(other.getActive());
            continueOnFailure(other.getContinueOnFailure());
            serviceAuth(other.getServiceAuth());
            return this;
        }

        /**
         * <p>A human-readable name for the connector.</p>
         * <p>A human-readable name for the connector.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public UrlStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The URL of the connector that will be used to search for documents.</p>
         * <p>The URL of the connector that will be used to search for documents.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("url")
        public _FinalStage url(@NotNull String url) {
            this.url = Objects.requireNonNull(url, "url must not be null");
            return this;
        }

        /**
         * <p>The service to service authentication configuration for the connector. Cannot be specified if oauth is specified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serviceAuth(CreateConnectorServiceAuth serviceAuth) {
            this.serviceAuth = Optional.ofNullable(serviceAuth);
            return this;
        }

        /**
         * <p>The service to service authentication configuration for the connector. Cannot be specified if oauth is specified.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "service_auth", nulls = Nulls.SKIP)
        public _FinalStage serviceAuth(Optional<CreateConnectorServiceAuth> serviceAuth) {
            this.serviceAuth = serviceAuth;
            return this;
        }

        /**
         * <p>Whether a chat request should continue or not if the request to this connector fails.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage continueOnFailure(Boolean continueOnFailure) {
            this.continueOnFailure = Optional.ofNullable(continueOnFailure);
            return this;
        }

        /**
         * <p>Whether a chat request should continue or not if the request to this connector fails.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "continue_on_failure", nulls = Nulls.SKIP)
        public _FinalStage continueOnFailure(Optional<Boolean> continueOnFailure) {
            this.continueOnFailure = continueOnFailure;
            return this;
        }

        /**
         * <p>Whether the connector is active or not.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage active(Boolean active) {
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * <p>Whether the connector is active or not.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "active", nulls = Nulls.SKIP)
        public _FinalStage active(Optional<Boolean> active) {
            this.active = active;
            return this;
        }

        /**
         * <p>The OAuth 2.0 configuration for the connector. Cannot be specified if service_auth is specified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage oauth(CreateConnectorOAuth oauth) {
            this.oauth = Optional.ofNullable(oauth);
            return this;
        }

        /**
         * <p>The OAuth 2.0 configuration for the connector. Cannot be specified if service_auth is specified.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "oauth", nulls = Nulls.SKIP)
        public _FinalStage oauth(Optional<CreateConnectorOAuth> oauth) {
            this.oauth = oauth;
            return this;
        }

        /**
         * <p>A list of fields to exclude from the prompt (fields remain in the document).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage excludes(List<String> excludes) {
            this.excludes = Optional.ofNullable(excludes);
            return this;
        }

        /**
         * <p>A list of fields to exclude from the prompt (fields remain in the document).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "excludes", nulls = Nulls.SKIP)
        public _FinalStage excludes(Optional<List<String>> excludes) {
            this.excludes = excludes;
            return this;
        }

        /**
         * <p>A description of the connector.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>A description of the connector.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public CreateConnectorRequest build() {
            return new CreateConnectorRequest(
                    name,
                    description,
                    url,
                    excludes,
                    oauth,
                    active,
                    continueOnFailure,
                    serviceAuth,
                    additionalProperties);
        }
    }
}

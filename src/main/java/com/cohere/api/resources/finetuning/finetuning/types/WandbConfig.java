/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.finetuning.finetuning.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WandbConfig.Builder.class)
public final class WandbConfig {
    private final String project;

    private final String apiKey;

    private final Optional<String> entity;

    private final Map<String, Object> additionalProperties;

    private WandbConfig(
            String project, String apiKey, Optional<String> entity, Map<String, Object> additionalProperties) {
        this.project = project;
        this.apiKey = apiKey;
        this.entity = entity;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The WandB project name to be used during training.
     */
    @JsonProperty("project")
    public String getProject() {
        return project;
    }

    /**
     * @return The WandB API key to be used during training.
     */
    @JsonProperty("api_key")
    public String getApiKey() {
        return apiKey;
    }

    /**
     * @return The WandB entity name to be used during training.
     */
    @JsonProperty("entity")
    public Optional<String> getEntity() {
        return entity;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WandbConfig && equalTo((WandbConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WandbConfig other) {
        return project.equals(other.project) && apiKey.equals(other.apiKey) && entity.equals(other.entity);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.project, this.apiKey, this.entity);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ProjectStage builder() {
        return new Builder();
    }

    public interface ProjectStage {
        /**
         * <p>The WandB project name to be used during training.</p>
         */
        ApiKeyStage project(@NotNull String project);

        Builder from(WandbConfig other);
    }

    public interface ApiKeyStage {
        /**
         * <p>The WandB API key to be used during training.</p>
         */
        _FinalStage apiKey(@NotNull String apiKey);
    }

    public interface _FinalStage {
        WandbConfig build();

        /**
         * <p>The WandB entity name to be used during training.</p>
         */
        _FinalStage entity(Optional<String> entity);

        _FinalStage entity(String entity);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ProjectStage, ApiKeyStage, _FinalStage {
        private String project;

        private String apiKey;

        private Optional<String> entity = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WandbConfig other) {
            project(other.getProject());
            apiKey(other.getApiKey());
            entity(other.getEntity());
            return this;
        }

        /**
         * <p>The WandB project name to be used during training.</p>
         * <p>The WandB project name to be used during training.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("project")
        public ApiKeyStage project(@NotNull String project) {
            this.project = Objects.requireNonNull(project, "project must not be null");
            return this;
        }

        /**
         * <p>The WandB API key to be used during training.</p>
         * <p>The WandB API key to be used during training.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("api_key")
        public _FinalStage apiKey(@NotNull String apiKey) {
            this.apiKey = Objects.requireNonNull(apiKey, "apiKey must not be null");
            return this;
        }

        /**
         * <p>The WandB entity name to be used during training.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage entity(String entity) {
            this.entity = Optional.ofNullable(entity);
            return this;
        }

        /**
         * <p>The WandB entity name to be used during training.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "entity", nulls = Nulls.SKIP)
        public _FinalStage entity(Optional<String> entity) {
            this.entity = entity;
            return this;
        }

        @java.lang.Override
        public WandbConfig build() {
            return new WandbConfig(project, apiKey, entity, additionalProperties);
        }
    }
}

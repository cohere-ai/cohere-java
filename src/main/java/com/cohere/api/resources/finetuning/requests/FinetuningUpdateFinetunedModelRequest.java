/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.finetuning.requests;

import com.cohere.api.core.ObjectMappers;
import com.cohere.api.resources.finetuning.finetuning.types.Settings;
import com.cohere.api.resources.finetuning.finetuning.types.Status;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FinetuningUpdateFinetunedModelRequest.Builder.class)
public final class FinetuningUpdateFinetunedModelRequest {
    private final String name;

    private final Settings settings;

    private final Optional<Status> status;

    private final Map<String, Object> additionalProperties;

    private FinetuningUpdateFinetunedModelRequest(
            String name, Settings settings, Optional<Status> status, Map<String, Object> additionalProperties) {
        this.name = name;
        this.settings = settings;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return FinetunedModel name (e.g. <code>foobar</code>).
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return FinetunedModel settings such as dataset, hyperparameters...
     */
    @JsonProperty("settings")
    public Settings getSettings() {
        return settings;
    }

    /**
     * @return Current stage in the life-cycle of the fine-tuned model.
     */
    @JsonProperty("status")
    public Optional<Status> getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FinetuningUpdateFinetunedModelRequest
                && equalTo((FinetuningUpdateFinetunedModelRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FinetuningUpdateFinetunedModelRequest other) {
        return name.equals(other.name) && settings.equals(other.settings) && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.settings, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>FinetunedModel name (e.g. <code>foobar</code>).</p>
         */
        SettingsStage name(@NotNull String name);

        Builder from(FinetuningUpdateFinetunedModelRequest other);
    }

    public interface SettingsStage {
        /**
         * <p>FinetunedModel settings such as dataset, hyperparameters...</p>
         */
        _FinalStage settings(@NotNull Settings settings);
    }

    public interface _FinalStage {
        FinetuningUpdateFinetunedModelRequest build();

        /**
         * <p>Current stage in the life-cycle of the fine-tuned model.</p>
         */
        _FinalStage status(Optional<Status> status);

        _FinalStage status(Status status);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, SettingsStage, _FinalStage {
        private String name;

        private Settings settings;

        private Optional<Status> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(FinetuningUpdateFinetunedModelRequest other) {
            name(other.getName());
            settings(other.getSettings());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>FinetunedModel name (e.g. <code>foobar</code>).</p>
         * <p>FinetunedModel name (e.g. <code>foobar</code>).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public SettingsStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>FinetunedModel settings such as dataset, hyperparameters...</p>
         * <p>FinetunedModel settings such as dataset, hyperparameters...</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("settings")
        public _FinalStage settings(@NotNull Settings settings) {
            this.settings = Objects.requireNonNull(settings, "settings must not be null");
            return this;
        }

        /**
         * <p>Current stage in the life-cycle of the fine-tuned model.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(Status status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Current stage in the life-cycle of the fine-tuned model.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<Status> status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        public FinetuningUpdateFinetunedModelRequest build() {
            return new FinetuningUpdateFinetunedModelRequest(name, settings, status, additionalProperties);
        }
    }
}

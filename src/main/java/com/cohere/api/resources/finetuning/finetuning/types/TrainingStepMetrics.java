/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.finetuning.finetuning.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TrainingStepMetrics.Builder.class)
public final class TrainingStepMetrics {
    private final Optional<OffsetDateTime> createdAt;

    private final Optional<Integer> stepNumber;

    private final Optional<Map<String, Double>> metrics;

    private final Map<String, Object> additionalProperties;

    private TrainingStepMetrics(
            Optional<OffsetDateTime> createdAt,
            Optional<Integer> stepNumber,
            Optional<Map<String, Double>> metrics,
            Map<String, Object> additionalProperties) {
        this.createdAt = createdAt;
        this.stepNumber = stepNumber;
        this.metrics = metrics;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Creation timestamp.
     */
    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Step number.
     */
    @JsonProperty("step_number")
    public Optional<Integer> getStepNumber() {
        return stepNumber;
    }

    /**
     * @return Map of names and values for each evaluation metrics.
     */
    @JsonProperty("metrics")
    public Optional<Map<String, Double>> getMetrics() {
        return metrics;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TrainingStepMetrics && equalTo((TrainingStepMetrics) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TrainingStepMetrics other) {
        return createdAt.equals(other.createdAt)
                && stepNumber.equals(other.stepNumber)
                && metrics.equals(other.metrics);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.createdAt, this.stepNumber, this.metrics);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<Integer> stepNumber = Optional.empty();

        private Optional<Map<String, Double>> metrics = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TrainingStepMetrics other) {
            createdAt(other.getCreatedAt());
            stepNumber(other.getStepNumber());
            metrics(other.getMetrics());
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "step_number", nulls = Nulls.SKIP)
        public Builder stepNumber(Optional<Integer> stepNumber) {
            this.stepNumber = stepNumber;
            return this;
        }

        public Builder stepNumber(Integer stepNumber) {
            this.stepNumber = Optional.ofNullable(stepNumber);
            return this;
        }

        @JsonSetter(value = "metrics", nulls = Nulls.SKIP)
        public Builder metrics(Optional<Map<String, Double>> metrics) {
            this.metrics = metrics;
            return this;
        }

        public Builder metrics(Map<String, Double> metrics) {
            this.metrics = Optional.ofNullable(metrics);
            return this;
        }

        public TrainingStepMetrics build() {
            return new TrainingStepMetrics(createdAt, stepNumber, metrics, additionalProperties);
        }
    }
}

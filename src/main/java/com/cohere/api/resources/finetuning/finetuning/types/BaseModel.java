/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.finetuning.finetuning.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BaseModel.Builder.class)
public final class BaseModel {
    private final Optional<String> name;

    private final Optional<String> version;

    private final BaseType baseType;

    private final Optional<Strategy> strategy;

    private final Map<String, Object> additionalProperties;

    private BaseModel(
            Optional<String> name,
            Optional<String> version,
            BaseType baseType,
            Optional<Strategy> strategy,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.version = version;
        this.baseType = baseType;
        this.strategy = strategy;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the base model.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return read-only. The version of the base model.
     */
    @JsonProperty("version")
    public Optional<String> getVersion() {
        return version;
    }

    /**
     * @return The type of the base model.
     */
    @JsonProperty("base_type")
    public BaseType getBaseType() {
        return baseType;
    }

    /**
     * @return Deprecated: The fine-tuning strategy.
     */
    @JsonProperty("strategy")
    public Optional<Strategy> getStrategy() {
        return strategy;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BaseModel && equalTo((BaseModel) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BaseModel other) {
        return name.equals(other.name)
                && version.equals(other.version)
                && baseType.equals(other.baseType)
                && strategy.equals(other.strategy);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.version, this.baseType, this.strategy);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BaseTypeStage builder() {
        return new Builder();
    }

    public interface BaseTypeStage {
        /**
         * <p>The type of the base model.</p>
         */
        _FinalStage baseType(@NotNull BaseType baseType);

        Builder from(BaseModel other);
    }

    public interface _FinalStage {
        BaseModel build();

        /**
         * <p>The name of the base model.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        /**
         * <p>read-only. The version of the base model.</p>
         */
        _FinalStage version(Optional<String> version);

        _FinalStage version(String version);

        /**
         * <p>Deprecated: The fine-tuning strategy.</p>
         */
        _FinalStage strategy(Optional<Strategy> strategy);

        _FinalStage strategy(Strategy strategy);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BaseTypeStage, _FinalStage {
        private BaseType baseType;

        private Optional<Strategy> strategy = Optional.empty();

        private Optional<String> version = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BaseModel other) {
            name(other.getName());
            version(other.getVersion());
            baseType(other.getBaseType());
            strategy(other.getStrategy());
            return this;
        }

        /**
         * <p>The type of the base model.</p>
         * <p>The type of the base model.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("base_type")
        public _FinalStage baseType(@NotNull BaseType baseType) {
            this.baseType = Objects.requireNonNull(baseType, "baseType must not be null");
            return this;
        }

        /**
         * <p>Deprecated: The fine-tuning strategy.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage strategy(Strategy strategy) {
            this.strategy = Optional.ofNullable(strategy);
            return this;
        }

        /**
         * <p>Deprecated: The fine-tuning strategy.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "strategy", nulls = Nulls.SKIP)
        public _FinalStage strategy(Optional<Strategy> strategy) {
            this.strategy = strategy;
            return this;
        }

        /**
         * <p>read-only. The version of the base model.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage version(String version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>read-only. The version of the base model.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<String> version) {
            this.version = version;
            return this;
        }

        /**
         * <p>The name of the base model.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The name of the base model.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public BaseModel build() {
            return new BaseModel(name, version, baseType, strategy, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.datasets;

import com.cohere.api.core.ClientOptions;
import com.cohere.api.core.RequestOptions;
import com.cohere.api.resources.datasets.requests.DatasetsCreateRequest;
import com.cohere.api.resources.datasets.requests.DatasetsListRequest;
import com.cohere.api.resources.datasets.types.DatasetsCreateResponse;
import com.cohere.api.resources.datasets.types.DatasetsGetResponse;
import com.cohere.api.resources.datasets.types.DatasetsGetUsageResponse;
import com.cohere.api.resources.datasets.types.DatasetsListResponse;
import java.io.File;
import java.util.Map;
import java.util.Optional;

public class DatasetsClient {
    protected final ClientOptions clientOptions;

    private final RawDatasetsClient rawClient;

    public DatasetsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawDatasetsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawDatasetsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * List datasets that have been created.
     */
    public DatasetsListResponse list() {
        return this.rawClient.list().body();
    }

    /**
     * List datasets that have been created.
     */
    public DatasetsListResponse list(DatasetsListRequest request) {
        return this.rawClient.list(request).body();
    }

    /**
     * List datasets that have been created.
     */
    public DatasetsListResponse list(DatasetsListRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).body();
    }

    /**
     * Create a dataset by uploading a file. See <a href="https://docs.cohere.com/docs/datasets#dataset-creation">'Dataset Creation'</a> for more information.
     */
    public DatasetsCreateResponse create(File data, Optional<File> evalData, DatasetsCreateRequest request) {
        return this.rawClient.create(data, evalData, request).body();
    }

    /**
     * Create a dataset by uploading a file. See <a href="https://docs.cohere.com/docs/datasets#dataset-creation">'Dataset Creation'</a> for more information.
     */
    public DatasetsCreateResponse create(
            File data, Optional<File> evalData, DatasetsCreateRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(data, evalData, request, requestOptions).body();
    }

    /**
     * View the dataset storage usage for your Organization. Each Organization can have up to 10GB of storage across all their users.
     */
    public DatasetsGetUsageResponse getUsage() {
        return this.rawClient.getUsage().body();
    }

    /**
     * View the dataset storage usage for your Organization. Each Organization can have up to 10GB of storage across all their users.
     */
    public DatasetsGetUsageResponse getUsage(RequestOptions requestOptions) {
        return this.rawClient.getUsage(requestOptions).body();
    }

    /**
     * Retrieve a dataset by ID. See <a href="https://docs.cohere.com/docs/datasets">'Datasets'</a> for more information.
     */
    public DatasetsGetResponse get(String id) {
        return this.rawClient.get(id).body();
    }

    /**
     * Retrieve a dataset by ID. See <a href="https://docs.cohere.com/docs/datasets">'Datasets'</a> for more information.
     */
    public DatasetsGetResponse get(String id, RequestOptions requestOptions) {
        return this.rawClient.get(id, requestOptions).body();
    }

    /**
     * Delete a dataset by ID. Datasets are automatically deleted after 30 days, but they can also be deleted manually.
     */
    public Map<String, Object> delete(String id) {
        return this.rawClient.delete(id).body();
    }

    /**
     * Delete a dataset by ID. Datasets are automatically deleted after 30 days, but they can also be deleted manually.
     */
    public Map<String, Object> delete(String id, RequestOptions requestOptions) {
        return this.rawClient.delete(id, requestOptions).body();
    }
}

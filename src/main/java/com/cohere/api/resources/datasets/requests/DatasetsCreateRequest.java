/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.resources.datasets.requests;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DatasetsCreateRequest.Builder.class)
public final class DatasetsCreateRequest {
    private final Optional<String> name;

    private final Optional<String> type;

    private final Optional<Boolean> keepOriginalFile;

    private final Optional<String> textSeparator;

    private final Optional<String> csvDelimiter;

    private final Map<String, Object> additionalProperties;

    private DatasetsCreateRequest(
            Optional<String> name,
            Optional<String> type,
            Optional<Boolean> keepOriginalFile,
            Optional<String> textSeparator,
            Optional<String> csvDelimiter,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.type = type;
        this.keepOriginalFile = keepOriginalFile;
        this.textSeparator = textSeparator;
        this.csvDelimiter = csvDelimiter;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the uploaded dataset.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The dataset type, which is used to validate the data.
     */
    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    /**
     * @return Indicates if the original file should be stored.
     */
    @JsonProperty("keep_original_file")
    public Optional<Boolean> getKeepOriginalFile() {
        return keepOriginalFile;
    }

    /**
     * @return Raw .txt uploads will be split into entries using the text_separator value.
     */
    @JsonProperty("text_separator")
    public Optional<String> getTextSeparator() {
        return textSeparator;
    }

    /**
     * @return The delimiter used for .csv uploads.
     */
    @JsonProperty("csv_delimiter")
    public Optional<String> getCsvDelimiter() {
        return csvDelimiter;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DatasetsCreateRequest && equalTo((DatasetsCreateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DatasetsCreateRequest other) {
        return name.equals(other.name)
                && type.equals(other.type)
                && keepOriginalFile.equals(other.keepOriginalFile)
                && textSeparator.equals(other.textSeparator)
                && csvDelimiter.equals(other.csvDelimiter);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.name, this.type, this.keepOriginalFile, this.textSeparator, this.csvDelimiter);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<Boolean> keepOriginalFile = Optional.empty();

        private Optional<String> textSeparator = Optional.empty();

        private Optional<String> csvDelimiter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DatasetsCreateRequest other) {
            name(other.getName());
            type(other.getType());
            keepOriginalFile(other.getKeepOriginalFile());
            textSeparator(other.getTextSeparator());
            csvDelimiter(other.getCsvDelimiter());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.of(name);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.of(type);
            return this;
        }

        @JsonSetter(value = "keep_original_file", nulls = Nulls.SKIP)
        public Builder keepOriginalFile(Optional<Boolean> keepOriginalFile) {
            this.keepOriginalFile = keepOriginalFile;
            return this;
        }

        public Builder keepOriginalFile(Boolean keepOriginalFile) {
            this.keepOriginalFile = Optional.of(keepOriginalFile);
            return this;
        }

        @JsonSetter(value = "text_separator", nulls = Nulls.SKIP)
        public Builder textSeparator(Optional<String> textSeparator) {
            this.textSeparator = textSeparator;
            return this;
        }

        public Builder textSeparator(String textSeparator) {
            this.textSeparator = Optional.of(textSeparator);
            return this;
        }

        @JsonSetter(value = "csv_delimiter", nulls = Nulls.SKIP)
        public Builder csvDelimiter(Optional<String> csvDelimiter) {
            this.csvDelimiter = csvDelimiter;
            return this;
        }

        public Builder csvDelimiter(String csvDelimiter) {
            this.csvDelimiter = Optional.of(csvDelimiter);
            return this;
        }

        public DatasetsCreateRequest build() {
            return new DatasetsCreateRequest(
                    name, type, keepOriginalFile, textSeparator, csvDelimiter, additionalProperties);
        }
    }
}

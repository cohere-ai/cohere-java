/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.requests;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DetectLanguageRequest.Builder.class)
public final class DetectLanguageRequest {
    private final List<String> texts;

    private final Optional<String> model;

    private final Map<String, Object> additionalProperties;

    private DetectLanguageRequest(
            List<String> texts, Optional<String> model, Map<String, Object> additionalProperties) {
        this.texts = texts;
        this.model = model;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return List of strings to run the detection on.
     */
    @JsonProperty("texts")
    public List<String> getTexts() {
        return texts;
    }

    /**
     * @return The identifier of the model to generate with.
     */
    @JsonProperty("model")
    public Optional<String> getModel() {
        return model;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DetectLanguageRequest && equalTo((DetectLanguageRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DetectLanguageRequest other) {
        return texts.equals(other.texts) && model.equals(other.model);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.texts, this.model);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> texts = new ArrayList<>();

        private Optional<String> model = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DetectLanguageRequest other) {
            texts(other.getTexts());
            model(other.getModel());
            return this;
        }

        @JsonSetter(value = "texts", nulls = Nulls.SKIP)
        public Builder texts(List<String> texts) {
            this.texts.clear();
            this.texts.addAll(texts);
            return this;
        }

        public Builder addTexts(String texts) {
            this.texts.add(texts);
            return this;
        }

        public Builder addAllTexts(List<String> texts) {
            this.texts.addAll(texts);
            return this;
        }

        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public Builder model(Optional<String> model) {
            this.model = model;
            return this;
        }

        public Builder model(String model) {
            this.model = Optional.of(model);
            return this;
        }

        public DetectLanguageRequest build() {
            return new DetectLanguageRequest(texts, model, additionalProperties);
        }
    }
}

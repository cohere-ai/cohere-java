/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.requests;

import com.cohere.api.core.ObjectMappers;
import com.cohere.api.types.SummarizeRequestExtractiveness;
import com.cohere.api.types.SummarizeRequestFormat;
import com.cohere.api.types.SummarizeRequestLength;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SummarizeRequest.Builder.class)
public final class SummarizeRequest {
    private final String text;

    private final Optional<SummarizeRequestLength> length;

    private final Optional<SummarizeRequestFormat> format;

    private final Optional<String> model;

    private final Optional<SummarizeRequestExtractiveness> extractiveness;

    private final Optional<Double> temperature;

    private final Optional<String> additionalCommand;

    private final Map<String, Object> additionalProperties;

    private SummarizeRequest(
            String text,
            Optional<SummarizeRequestLength> length,
            Optional<SummarizeRequestFormat> format,
            Optional<String> model,
            Optional<SummarizeRequestExtractiveness> extractiveness,
            Optional<Double> temperature,
            Optional<String> additionalCommand,
            Map<String, Object> additionalProperties) {
        this.text = text;
        this.length = length;
        this.format = format;
        this.model = model;
        this.extractiveness = extractiveness;
        this.temperature = temperature;
        this.additionalCommand = additionalCommand;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The text to generate a summary for. Can be up to 100,000 characters long. Currently the only supported language is English.
     */
    @JsonProperty("text")
    public String getText() {
        return text;
    }

    /**
     * @return One of <code>short</code>, <code>medium</code>, <code>long</code>, or <code>auto</code> defaults to <code>auto</code>. Indicates the approximate length of the summary. If <code>auto</code> is selected, the best option will be picked based on the input text.
     */
    @JsonProperty("length")
    public Optional<SummarizeRequestLength> getLength() {
        return length;
    }

    /**
     * @return One of <code>paragraph</code>, <code>bullets</code>, or <code>auto</code>, defaults to <code>auto</code>. Indicates the style in which the summary will be delivered - in a free form paragraph or in bullet points. If <code>auto</code> is selected, the best option will be picked based on the input text.
     */
    @JsonProperty("format")
    public Optional<SummarizeRequestFormat> getFormat() {
        return format;
    }

    /**
     * @return The identifier of the model to generate the summary with. Currently available models are <code>command</code> (default), <code>command-nightly</code> (experimental), <code>command-light</code>, and <code>command-light-nightly</code> (experimental). Smaller, &quot;light&quot; models are faster, while larger models will perform better.
     */
    @JsonProperty("model")
    public Optional<String> getModel() {
        return model;
    }

    /**
     * @return One of <code>low</code>, <code>medium</code>, <code>high</code>, or <code>auto</code>, defaults to <code>auto</code>. Controls how close to the original text the summary is. <code>high</code> extractiveness summaries will lean towards reusing sentences verbatim, while <code>low</code> extractiveness summaries will tend to paraphrase more. If <code>auto</code> is selected, the best option will be picked based on the input text.
     */
    @JsonProperty("extractiveness")
    public Optional<SummarizeRequestExtractiveness> getExtractiveness() {
        return extractiveness;
    }

    /**
     * @return Ranges from 0 to 5. Controls the randomness of the output. Lower values tend to generate more “predictable” output, while higher values tend to generate more “creative” output. The sweet spot is typically between 0 and 1.
     */
    @JsonProperty("temperature")
    public Optional<Double> getTemperature() {
        return temperature;
    }

    /**
     * @return A free-form instruction for modifying how the summaries get generated. Should complete the sentence &quot;Generate a summary _&quot;. Eg. &quot;focusing on the next steps&quot; or &quot;written by Yoda&quot;
     */
    @JsonProperty("additional_command")
    public Optional<String> getAdditionalCommand() {
        return additionalCommand;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SummarizeRequest && equalTo((SummarizeRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SummarizeRequest other) {
        return text.equals(other.text)
                && length.equals(other.length)
                && format.equals(other.format)
                && model.equals(other.model)
                && extractiveness.equals(other.extractiveness)
                && temperature.equals(other.temperature)
                && additionalCommand.equals(other.additionalCommand);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                this.text,
                this.length,
                this.format,
                this.model,
                this.extractiveness,
                this.temperature,
                this.additionalCommand);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TextStage builder() {
        return new Builder();
    }

    public interface TextStage {
        _FinalStage text(String text);

        Builder from(SummarizeRequest other);
    }

    public interface _FinalStage {
        SummarizeRequest build();

        _FinalStage length(Optional<SummarizeRequestLength> length);

        _FinalStage length(SummarizeRequestLength length);

        _FinalStage format(Optional<SummarizeRequestFormat> format);

        _FinalStage format(SummarizeRequestFormat format);

        _FinalStage model(Optional<String> model);

        _FinalStage model(String model);

        _FinalStage extractiveness(Optional<SummarizeRequestExtractiveness> extractiveness);

        _FinalStage extractiveness(SummarizeRequestExtractiveness extractiveness);

        _FinalStage temperature(Optional<Double> temperature);

        _FinalStage temperature(Double temperature);

        _FinalStage additionalCommand(Optional<String> additionalCommand);

        _FinalStage additionalCommand(String additionalCommand);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TextStage, _FinalStage {
        private String text;

        private Optional<String> additionalCommand = Optional.empty();

        private Optional<Double> temperature = Optional.empty();

        private Optional<SummarizeRequestExtractiveness> extractiveness = Optional.empty();

        private Optional<String> model = Optional.empty();

        private Optional<SummarizeRequestFormat> format = Optional.empty();

        private Optional<SummarizeRequestLength> length = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(SummarizeRequest other) {
            text(other.getText());
            length(other.getLength());
            format(other.getFormat());
            model(other.getModel());
            extractiveness(other.getExtractiveness());
            temperature(other.getTemperature());
            additionalCommand(other.getAdditionalCommand());
            return this;
        }

        /**
         * <p>The text to generate a summary for. Can be up to 100,000 characters long. Currently the only supported language is English.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("text")
        public _FinalStage text(String text) {
            this.text = text;
            return this;
        }

        /**
         * <p>A free-form instruction for modifying how the summaries get generated. Should complete the sentence &quot;Generate a summary _&quot;. Eg. &quot;focusing on the next steps&quot; or &quot;written by Yoda&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage additionalCommand(String additionalCommand) {
            this.additionalCommand = Optional.of(additionalCommand);
            return this;
        }

        @Override
        @JsonSetter(value = "additional_command", nulls = Nulls.SKIP)
        public _FinalStage additionalCommand(Optional<String> additionalCommand) {
            this.additionalCommand = additionalCommand;
            return this;
        }

        /**
         * <p>Ranges from 0 to 5. Controls the randomness of the output. Lower values tend to generate more “predictable” output, while higher values tend to generate more “creative” output. The sweet spot is typically between 0 and 1.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage temperature(Double temperature) {
            this.temperature = Optional.of(temperature);
            return this;
        }

        @Override
        @JsonSetter(value = "temperature", nulls = Nulls.SKIP)
        public _FinalStage temperature(Optional<Double> temperature) {
            this.temperature = temperature;
            return this;
        }

        /**
         * <p>One of <code>low</code>, <code>medium</code>, <code>high</code>, or <code>auto</code>, defaults to <code>auto</code>. Controls how close to the original text the summary is. <code>high</code> extractiveness summaries will lean towards reusing sentences verbatim, while <code>low</code> extractiveness summaries will tend to paraphrase more. If <code>auto</code> is selected, the best option will be picked based on the input text.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage extractiveness(SummarizeRequestExtractiveness extractiveness) {
            this.extractiveness = Optional.of(extractiveness);
            return this;
        }

        @Override
        @JsonSetter(value = "extractiveness", nulls = Nulls.SKIP)
        public _FinalStage extractiveness(Optional<SummarizeRequestExtractiveness> extractiveness) {
            this.extractiveness = extractiveness;
            return this;
        }

        /**
         * <p>The identifier of the model to generate the summary with. Currently available models are <code>command</code> (default), <code>command-nightly</code> (experimental), <code>command-light</code>, and <code>command-light-nightly</code> (experimental). Smaller, &quot;light&quot; models are faster, while larger models will perform better.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage model(String model) {
            this.model = Optional.of(model);
            return this;
        }

        @Override
        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public _FinalStage model(Optional<String> model) {
            this.model = model;
            return this;
        }

        /**
         * <p>One of <code>paragraph</code>, <code>bullets</code>, or <code>auto</code>, defaults to <code>auto</code>. Indicates the style in which the summary will be delivered - in a free form paragraph or in bullet points. If <code>auto</code> is selected, the best option will be picked based on the input text.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage format(SummarizeRequestFormat format) {
            this.format = Optional.of(format);
            return this;
        }

        @Override
        @JsonSetter(value = "format", nulls = Nulls.SKIP)
        public _FinalStage format(Optional<SummarizeRequestFormat> format) {
            this.format = format;
            return this;
        }

        /**
         * <p>One of <code>short</code>, <code>medium</code>, <code>long</code>, or <code>auto</code> defaults to <code>auto</code>. Indicates the approximate length of the summary. If <code>auto</code> is selected, the best option will be picked based on the input text.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        public _FinalStage length(SummarizeRequestLength length) {
            this.length = Optional.of(length);
            return this;
        }

        @Override
        @JsonSetter(value = "length", nulls = Nulls.SKIP)
        public _FinalStage length(Optional<SummarizeRequestLength> length) {
            this.length = length;
            return this;
        }

        @Override
        public SummarizeRequest build() {
            return new SummarizeRequest(
                    text, length, format, model, extractiveness, temperature, additionalCommand, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.requests;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DetokenizeRequest.Builder.class)
public final class DetokenizeRequest {
    private final List<Integer> tokens;

    private final Optional<String> model;

    private final Map<String, Object> additionalProperties;

    private DetokenizeRequest(List<Integer> tokens, Optional<String> model, Map<String, Object> additionalProperties) {
        this.tokens = tokens;
        this.model = model;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The list of tokens to be detokenized.
     */
    @JsonProperty("tokens")
    public List<Integer> getTokens() {
        return tokens;
    }

    /**
     * @return An optional parameter to provide the model name. This will ensure that the detokenization is done by the tokenizer used by that model.
     */
    @JsonProperty("model")
    public Optional<String> getModel() {
        return model;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DetokenizeRequest && equalTo((DetokenizeRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DetokenizeRequest other) {
        return tokens.equals(other.tokens) && model.equals(other.model);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.tokens, this.model);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<Integer> tokens = new ArrayList<>();

        private Optional<String> model = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DetokenizeRequest other) {
            tokens(other.getTokens());
            model(other.getModel());
            return this;
        }

        @JsonSetter(value = "tokens", nulls = Nulls.SKIP)
        public Builder tokens(List<Integer> tokens) {
            this.tokens.clear();
            this.tokens.addAll(tokens);
            return this;
        }

        public Builder addTokens(Integer tokens) {
            this.tokens.add(tokens);
            return this;
        }

        public Builder addAllTokens(List<Integer> tokens) {
            this.tokens.addAll(tokens);
            return this;
        }

        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public Builder model(Optional<String> model) {
            this.model = model;
            return this;
        }

        public Builder model(String model) {
            this.model = Optional.of(model);
            return this;
        }

        public DetokenizeRequest build() {
            return new DetokenizeRequest(tokens, model, additionalProperties);
        }
    }
}

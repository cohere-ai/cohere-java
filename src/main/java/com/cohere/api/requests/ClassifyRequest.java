/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api.requests;

import com.cohere.api.core.ObjectMappers;
import com.cohere.api.types.ClassifyExample;
import com.cohere.api.types.ClassifyRequestTruncate;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClassifyRequest.Builder.class)
public final class ClassifyRequest {
    private final List<String> inputs;

    private final Optional<List<ClassifyExample>> examples;

    private final Optional<String> model;

    private final Optional<String> preset;

    private final Optional<ClassifyRequestTruncate> truncate;

    private final Map<String, Object> additionalProperties;

    private ClassifyRequest(
            List<String> inputs,
            Optional<List<ClassifyExample>> examples,
            Optional<String> model,
            Optional<String> preset,
            Optional<ClassifyRequestTruncate> truncate,
            Map<String, Object> additionalProperties) {
        this.inputs = inputs;
        this.examples = examples;
        this.model = model;
        this.preset = preset;
        this.truncate = truncate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A list of up to 96 texts to be classified. Each one must be a non-empty string.
     * There is, however, no consistent, universal limit to the length a particular input can be. We perform classification on the first <code>x</code> tokens of each input, and <code>x</code> varies depending on which underlying model is powering classification. The maximum token length for each model is listed in the &quot;max tokens&quot; column <a href="https://docs.cohere.com/docs/models">here</a>.
     * Note: by default the <code>truncate</code> parameter is set to <code>END</code>, so tokens exceeding the limit will be automatically dropped. This behavior can be disabled by setting <code>truncate</code> to <code>NONE</code>, which will result in validation errors for longer texts.
     */
    @JsonProperty("inputs")
    public List<String> getInputs() {
        return inputs;
    }

    /**
     * @return An array of examples to provide context to the model. Each example is a text string and its associated label/class. Each unique label requires at least 2 examples associated with it; the maximum number of examples is 2500, and each example has a maximum length of 512 tokens. The values should be structured as <code>{text: &quot;...&quot;,label: &quot;...&quot;}</code>.
     * Note: <a href="https://docs.cohere.com/docs/classify-fine-tuning">Fine-tuned Models</a> trained on classification examples don't require the <code>examples</code> parameter to be passed in explicitly.
     */
    @JsonProperty("examples")
    public Optional<List<ClassifyExample>> getExamples() {
        return examples;
    }

    /**
     * @return ID of a <a href="https://docs.cohere.com/v2/docs/classify-starting-the-training">Fine-tuned</a> Classify model
     */
    @JsonProperty("model")
    public Optional<String> getModel() {
        return model;
    }

    /**
     * @return The ID of a custom playground preset. You can create presets in the <a href="https://dashboard.cohere.com/playground">playground</a>. If you use a preset, all other parameters become optional, and any included parameters will override the preset's parameters.
     */
    @JsonProperty("preset")
    public Optional<String> getPreset() {
        return preset;
    }

    /**
     * @return One of <code>NONE|START|END</code> to specify how the API will handle inputs longer than the maximum token length.
     * Passing <code>START</code> will discard the start of the input. <code>END</code> will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.
     * If <code>NONE</code> is selected, when the input exceeds the maximum input token length an error will be returned.
     */
    @JsonProperty("truncate")
    public Optional<ClassifyRequestTruncate> getTruncate() {
        return truncate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClassifyRequest && equalTo((ClassifyRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClassifyRequest other) {
        return inputs.equals(other.inputs)
                && examples.equals(other.examples)
                && model.equals(other.model)
                && preset.equals(other.preset)
                && truncate.equals(other.truncate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.inputs, this.examples, this.model, this.preset, this.truncate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> inputs = new ArrayList<>();

        private Optional<List<ClassifyExample>> examples = Optional.empty();

        private Optional<String> model = Optional.empty();

        private Optional<String> preset = Optional.empty();

        private Optional<ClassifyRequestTruncate> truncate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClassifyRequest other) {
            inputs(other.getInputs());
            examples(other.getExamples());
            model(other.getModel());
            preset(other.getPreset());
            truncate(other.getTruncate());
            return this;
        }

        @JsonSetter(value = "inputs", nulls = Nulls.SKIP)
        public Builder inputs(List<String> inputs) {
            this.inputs.clear();
            this.inputs.addAll(inputs);
            return this;
        }

        public Builder addInputs(String inputs) {
            this.inputs.add(inputs);
            return this;
        }

        public Builder addAllInputs(List<String> inputs) {
            this.inputs.addAll(inputs);
            return this;
        }

        @JsonSetter(value = "examples", nulls = Nulls.SKIP)
        public Builder examples(Optional<List<ClassifyExample>> examples) {
            this.examples = examples;
            return this;
        }

        public Builder examples(List<ClassifyExample> examples) {
            this.examples = Optional.ofNullable(examples);
            return this;
        }

        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public Builder model(Optional<String> model) {
            this.model = model;
            return this;
        }

        public Builder model(String model) {
            this.model = Optional.ofNullable(model);
            return this;
        }

        @JsonSetter(value = "preset", nulls = Nulls.SKIP)
        public Builder preset(Optional<String> preset) {
            this.preset = preset;
            return this;
        }

        public Builder preset(String preset) {
            this.preset = Optional.ofNullable(preset);
            return this;
        }

        @JsonSetter(value = "truncate", nulls = Nulls.SKIP)
        public Builder truncate(Optional<ClassifyRequestTruncate> truncate) {
            this.truncate = truncate;
            return this;
        }

        public Builder truncate(ClassifyRequestTruncate truncate) {
            this.truncate = Optional.ofNullable(truncate);
            return this;
        }

        public ClassifyRequest build() {
            return new ClassifyRequest(inputs, examples, model, preset, truncate, additionalProperties);
        }
    }
}

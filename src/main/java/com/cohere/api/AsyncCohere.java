/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api;

import com.cohere.api.core.ClientOptions;
import com.cohere.api.core.RequestOptions;
import com.cohere.api.core.Suppliers;
import com.cohere.api.requests.ChatRequest;
import com.cohere.api.requests.ChatStreamRequest;
import com.cohere.api.requests.ClassifyRequest;
import com.cohere.api.requests.DetokenizeRequest;
import com.cohere.api.requests.EmbedRequest;
import com.cohere.api.requests.GenerateRequest;
import com.cohere.api.requests.GenerateStreamRequest;
import com.cohere.api.requests.RerankRequest;
import com.cohere.api.requests.SummarizeRequest;
import com.cohere.api.requests.TokenizeRequest;
import com.cohere.api.resources.connectors.AsyncConnectorsClient;
import com.cohere.api.resources.datasets.AsyncDatasetsClient;
import com.cohere.api.resources.embedjobs.AsyncEmbedJobsClient;
import com.cohere.api.resources.finetuning.AsyncFinetuningClient;
import com.cohere.api.resources.models.AsyncModelsClient;
import com.cohere.api.resources.v2.AsyncV2Client;
import com.cohere.api.types.CheckApiKeyResponse;
import com.cohere.api.types.ClassifyResponse;
import com.cohere.api.types.DetokenizeResponse;
import com.cohere.api.types.EmbedResponse;
import com.cohere.api.types.GenerateStreamedResponse;
import com.cohere.api.types.Generation;
import com.cohere.api.types.NonStreamedChatResponse;
import com.cohere.api.types.RerankResponse;
import com.cohere.api.types.StreamedChatResponse;
import com.cohere.api.types.SummarizeResponse;
import com.cohere.api.types.TokenizeResponse;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncCohere {
    protected final ClientOptions clientOptions;

    private final AsyncRawCohere rawClient;

    protected final Supplier<AsyncV2Client> v2Client;

    protected final Supplier<AsyncEmbedJobsClient> embedJobsClient;

    protected final Supplier<AsyncDatasetsClient> datasetsClient;

    protected final Supplier<AsyncConnectorsClient> connectorsClient;

    protected final Supplier<AsyncModelsClient> modelsClient;

    protected final Supplier<AsyncFinetuningClient> finetuningClient;

    public AsyncCohere(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawCohere(clientOptions);
        this.v2Client = Suppliers.memoize(() -> new AsyncV2Client(clientOptions));
        this.embedJobsClient = Suppliers.memoize(() -> new AsyncEmbedJobsClient(clientOptions));
        this.datasetsClient = Suppliers.memoize(() -> new AsyncDatasetsClient(clientOptions));
        this.connectorsClient = Suppliers.memoize(() -> new AsyncConnectorsClient(clientOptions));
        this.modelsClient = Suppliers.memoize(() -> new AsyncModelsClient(clientOptions));
        this.finetuningClient = Suppliers.memoize(() -> new AsyncFinetuningClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawCohere withRawResponse() {
        return this.rawClient;
    }

    /**
     * Generates a streamed text response to a user message.
     * <p>To learn how to use the Chat API and RAG follow our <a href="https://docs.cohere.com/docs/chat-api">Text Generation guides</a>.</p>
     */
    public CompletableFuture<Iterable<StreamedChatResponse>> chatStream(ChatStreamRequest request) {
        return this.rawClient.chatStream(request).thenApply(response -> response.body());
    }

    /**
     * Generates a streamed text response to a user message.
     * <p>To learn how to use the Chat API and RAG follow our <a href="https://docs.cohere.com/docs/chat-api">Text Generation guides</a>.</p>
     */
    public CompletableFuture<Iterable<StreamedChatResponse>> chatStream(
            ChatStreamRequest request, RequestOptions requestOptions) {
        return this.rawClient.chatStream(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generates a text response to a user message.
     * To learn how to use the Chat API and RAG follow our <a href="https://docs.cohere.com/docs/chat-api">Text Generation guides</a>.
     */
    public CompletableFuture<NonStreamedChatResponse> chat(ChatRequest request) {
        return this.rawClient.chat(request).thenApply(response -> response.body());
    }

    /**
     * Generates a text response to a user message.
     * To learn how to use the Chat API and RAG follow our <a href="https://docs.cohere.com/docs/chat-api">Text Generation guides</a>.
     */
    public CompletableFuture<NonStreamedChatResponse> chat(ChatRequest request, RequestOptions requestOptions) {
        return this.rawClient.chat(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * <p>&lt;Warning&gt;
     * This API is marked as &quot;Legacy&quot; and is no longer maintained. Follow the [migration guide](https://docs.cohere.com/docs/migrating-from-cogenerate-to-cochat) to start using the Chat with Streaming API.
     * &lt;/Warning&gt;
     * Generates realistic text conditioned on a given input.</p>
     */
    public CompletableFuture<Iterable<GenerateStreamedResponse>> generateStream(GenerateStreamRequest request) {
        return this.rawClient.generateStream(request).thenApply(response -> response.body());
    }

    /**
     * <p>&lt;Warning&gt;
     * This API is marked as &quot;Legacy&quot; and is no longer maintained. Follow the [migration guide](https://docs.cohere.com/docs/migrating-from-cogenerate-to-cochat) to start using the Chat with Streaming API.
     * &lt;/Warning&gt;
     * Generates realistic text conditioned on a given input.</p>
     */
    public CompletableFuture<Iterable<GenerateStreamedResponse>> generateStream(
            GenerateStreamRequest request, RequestOptions requestOptions) {
        return this.rawClient.generateStream(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * <p>&lt;Warning&gt;
     * This API is marked as &quot;Legacy&quot; and is no longer maintained. Follow the [migration guide](https://docs.cohere.com/docs/migrating-from-cogenerate-to-cochat) to start using the Chat API.
     * &lt;/Warning&gt;
     * Generates realistic text conditioned on a given input.</p>
     */
    public CompletableFuture<Generation> generate(GenerateRequest request) {
        return this.rawClient.generate(request).thenApply(response -> response.body());
    }

    /**
     * <p>&lt;Warning&gt;
     * This API is marked as &quot;Legacy&quot; and is no longer maintained. Follow the [migration guide](https://docs.cohere.com/docs/migrating-from-cogenerate-to-cochat) to start using the Chat API.
     * &lt;/Warning&gt;
     * Generates realistic text conditioned on a given input.</p>
     */
    public CompletableFuture<Generation> generate(GenerateRequest request, RequestOptions requestOptions) {
        return this.rawClient.generate(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint returns text and image embeddings. An embedding is a list of floating point numbers that captures semantic information about the content that it represents.
     * <p>Embeddings can be used to create classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.</p>
     * <p>If you want to learn more how to use the embedding model, have a look at the <a href="https://docs.cohere.com/docs/semantic-search">Semantic Search Guide</a>.</p>
     */
    public CompletableFuture<EmbedResponse> embed() {
        return this.rawClient.embed().thenApply(response -> response.body());
    }

    /**
     * This endpoint returns text and image embeddings. An embedding is a list of floating point numbers that captures semantic information about the content that it represents.
     * <p>Embeddings can be used to create classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.</p>
     * <p>If you want to learn more how to use the embedding model, have a look at the <a href="https://docs.cohere.com/docs/semantic-search">Semantic Search Guide</a>.</p>
     */
    public CompletableFuture<EmbedResponse> embed(EmbedRequest request) {
        return this.rawClient.embed(request).thenApply(response -> response.body());
    }

    /**
     * This endpoint returns text and image embeddings. An embedding is a list of floating point numbers that captures semantic information about the content that it represents.
     * <p>Embeddings can be used to create classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.</p>
     * <p>If you want to learn more how to use the embedding model, have a look at the <a href="https://docs.cohere.com/docs/semantic-search">Semantic Search Guide</a>.</p>
     */
    public CompletableFuture<EmbedResponse> embed(EmbedRequest request, RequestOptions requestOptions) {
        return this.rawClient.embed(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint takes in a query and a list of texts and produces an ordered array with each text assigned a relevance score.
     */
    public CompletableFuture<RerankResponse> rerank(RerankRequest request) {
        return this.rawClient.rerank(request).thenApply(response -> response.body());
    }

    /**
     * This endpoint takes in a query and a list of texts and produces an ordered array with each text assigned a relevance score.
     */
    public CompletableFuture<RerankResponse> rerank(RerankRequest request, RequestOptions requestOptions) {
        return this.rawClient.rerank(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint makes a prediction about which label fits the specified text inputs best. To make a prediction, Classify uses the provided <code>examples</code> of text + label pairs as a reference.
     * Note: <a href="https://docs.cohere.com/docs/classify-fine-tuning">Fine-tuned models</a> trained on classification examples don't require the <code>examples</code> parameter to be passed in explicitly.
     */
    public CompletableFuture<ClassifyResponse> classify(ClassifyRequest request) {
        return this.rawClient.classify(request).thenApply(response -> response.body());
    }

    /**
     * This endpoint makes a prediction about which label fits the specified text inputs best. To make a prediction, Classify uses the provided <code>examples</code> of text + label pairs as a reference.
     * Note: <a href="https://docs.cohere.com/docs/classify-fine-tuning">Fine-tuned models</a> trained on classification examples don't require the <code>examples</code> parameter to be passed in explicitly.
     */
    public CompletableFuture<ClassifyResponse> classify(ClassifyRequest request, RequestOptions requestOptions) {
        return this.rawClient.classify(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * <p>&lt;Warning&gt;
     * This API is marked as &quot;Legacy&quot; and is no longer maintained. Follow the [migration guide](https://docs.cohere.com/docs/migrating-from-cogenerate-to-cochat) to start using the Chat API.
     * &lt;/Warning&gt;
     * Generates a summary in English for a given text.</p>
     */
    public CompletableFuture<SummarizeResponse> summarize(SummarizeRequest request) {
        return this.rawClient.summarize(request).thenApply(response -> response.body());
    }

    /**
     * <p>&lt;Warning&gt;
     * This API is marked as &quot;Legacy&quot; and is no longer maintained. Follow the [migration guide](https://docs.cohere.com/docs/migrating-from-cogenerate-to-cochat) to start using the Chat API.
     * &lt;/Warning&gt;
     * Generates a summary in English for a given text.</p>
     */
    public CompletableFuture<SummarizeResponse> summarize(SummarizeRequest request, RequestOptions requestOptions) {
        return this.rawClient.summarize(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint splits input text into smaller units called tokens using byte-pair encoding (BPE). To learn more about tokenization and byte pair encoding, see the tokens page.
     */
    public CompletableFuture<TokenizeResponse> tokenize(TokenizeRequest request) {
        return this.rawClient.tokenize(request).thenApply(response -> response.body());
    }

    /**
     * This endpoint splits input text into smaller units called tokens using byte-pair encoding (BPE). To learn more about tokenization and byte pair encoding, see the tokens page.
     */
    public CompletableFuture<TokenizeResponse> tokenize(TokenizeRequest request, RequestOptions requestOptions) {
        return this.rawClient.tokenize(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This endpoint takes tokens using byte-pair encoding and returns their text representation. To learn more about tokenization and byte pair encoding, see the tokens page.
     */
    public CompletableFuture<DetokenizeResponse> detokenize(DetokenizeRequest request) {
        return this.rawClient.detokenize(request).thenApply(response -> response.body());
    }

    /**
     * This endpoint takes tokens using byte-pair encoding and returns their text representation. To learn more about tokenization and byte pair encoding, see the tokens page.
     */
    public CompletableFuture<DetokenizeResponse> detokenize(DetokenizeRequest request, RequestOptions requestOptions) {
        return this.rawClient.detokenize(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Checks that the api key in the Authorization header is valid and active
     */
    public CompletableFuture<CheckApiKeyResponse> checkApiKey() {
        return this.rawClient.checkApiKey().thenApply(response -> response.body());
    }

    /**
     * Checks that the api key in the Authorization header is valid and active
     */
    public CompletableFuture<CheckApiKeyResponse> checkApiKey(RequestOptions requestOptions) {
        return this.rawClient.checkApiKey(requestOptions).thenApply(response -> response.body());
    }

    public AsyncV2Client v2() {
        return this.v2Client.get();
    }

    public AsyncEmbedJobsClient embedJobs() {
        return this.embedJobsClient.get();
    }

    public AsyncDatasetsClient datasets() {
        return this.datasetsClient.get();
    }

    public AsyncConnectorsClient connectors() {
        return this.connectorsClient.get();
    }

    public AsyncModelsClient models() {
        return this.modelsClient.get();
    }

    public AsyncFinetuningClient finetuning() {
        return this.finetuningClient.get();
    }

    public static AsyncCohereBuilder builder() {
        return new AsyncCohereBuilder();
    }
}

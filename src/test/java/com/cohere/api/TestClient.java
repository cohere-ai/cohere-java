/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.cohere.api;

import com.cohere.api.core.Stream;
import java.io.IOException;
import java.io.StringReader;
import java.net.URI;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class TestClient {

    /**
     * Test data matching actual Cohere API response format (newline-delimited JSON)
     */
    private static final String ACTUAL_COHERE_API_RESPONSE =
            "{\"is_finished\":false,\"event_type\":\"stream-start\",\"generation_id\":\"cb40fd3c-7b8c-4c6a-a46f-8e812d2be99a\"}\n"
                    + "{\"is_finished\":false,\"event_type\":\"text-generation\",\"text\":\"Coh\"}\n"
                    + "{\"is_finished\":false,\"event_type\":\"text-generation\",\"text\":\"ere\"}\n"
                    + "{\"is_finished\":false,\"event_type\":\"text-generation\",\"text\":\" is\"}\n"
                    + "{\"is_finished\":false,\"event_type\":\"text-generation\",\"text\":\" a\"}\n"
                    + "{\"is_finished\":false,\"event_type\":\"text-generation\",\"text\":\" leading\"}\n"
                    + "{\"is_finished\":true,\"event_type\":\"stream-end\",\"finish_reason\":\"COMPLETE\"}\n";

    /**
     * Simple test data for basic functionality
     */
    private static final String SIMPLE_JSON_DATA =
            "{\"message\":\"first\"}\n" + "{\"message\":\"second\"}\n" + "{\"message\":\"third\"}\n";

    /**
     * Standard SSE format test data
     */
    private static final String SSE_TEST_DATA = "event: stream-start\n"
            + "id: event-1\n"
            + "data: {\"is_finished\":false,\"event_type\":\"stream-start\",\"generation_id\":\"test-123\"}\n"
            + "\n"
            + "event: text-generation\n"
            + "id: event-2\n"
            + "data: {\"is_finished\":false,\"event_type\":\"text-generation\",\"text\":\"Hello\"}\n"
            + "\n"
            + "event: text-generation\n"
            + "id: event-3\n"
            + "data: {\"is_finished\":false,\"event_type\":\"text-generation\",\"text\":\" World\"}\n"
            + "\n"
            + "event: stream-end\n"
            + "id: event-4\n"
            + "data: {\"is_finished\":true,\"event_type\":\"stream-end\",\"finish_reason\":\"COMPLETE\"}\n"
            + "\n";

    public static void main(String[] args) {
        TestClient client = new TestClient();
        client.test();
    }

    public void test() {
        System.out.println("Running Stream.java comprehensive tests...\n");

        testBackwardCompatibility();
        testJsonFactoryMethod();
        testActualCohereAPIFormat();
        testSSEFormat();
        testResourceManagement();
        testSSEInfo();
        System.out.println("All tests completed successfully! âœ…");
    }

    /**
     * Test backward compatibility with legacy constructor.
     * This ensures existing code continues to work unchanged.
     */
    private void testBackwardCompatibility() {
        System.out.println("ðŸ”„ Testing backward compatibility...");

        // Create stream using legacy constructor (how it was used before)
        StringReader reader = new StringReader(SIMPLE_JSON_DATA);
        Stream<TestEvent> legacyStream = new Stream<>(TestEvent.class, reader, "\n");

        List<TestEvent> events = new ArrayList<>();
        for (TestEvent event : legacyStream) {
            events.add(event);
        }

        // Verify we got all 3 events
        assert events.size() == 3 : "Expected 3 events, got " + events.size();
        assert "first".equals(events.get(0).message) : "First event message incorrect";
        assert "second".equals(events.get(1).message) : "Second event message incorrect";
        assert "third".equals(events.get(2).message) : "Third event message incorrect";

        System.out.println("âœ… Backward compatibility test passed - legacy constructor works\n");
    }

    /**
     * Test Stream.fromJson() factory method.
     * This is the new, more explicit way to create JSON streams.
     */
    private void testJsonFactoryMethod() {
        System.out.println("ðŸ“„ Testing Stream.fromJson() factory method...");

        // Test with explicit delimiter
        StringReader reader1 = new StringReader(SIMPLE_JSON_DATA);
        Stream<TestEvent> jsonStream1 = Stream.fromJson(TestEvent.class, reader1, "\n");

        int count1 = 0;
        for (TestEvent event : jsonStream1) {
            count1++;
            assert event.message != null : "Event message should not be null";
        }
        assert count1 == 3 : "Expected 3 events from explicit delimiter stream";

        // Test with default delimiter (newline)
        StringReader reader2 = new StringReader(SIMPLE_JSON_DATA);
        Stream<TestEvent> jsonStream2 = Stream.fromJson(TestEvent.class, reader2);

        int count2 = 0;
        for (TestEvent event : jsonStream2) {
            count2++;
        }
        assert count2 == 3 : "Expected 3 events from default delimiter stream";

        System.out.println("âœ… Stream.fromJson() factory method test passed\n");
    }

    /**
     * Test with actual Cohere API response format.
     * This ensures our implementation works with real-world data.
     */
    private void testActualCohereAPIFormat() {
        System.out.println("ðŸŽ¯ Testing actual Cohere API response format...");

        StringReader reader = new StringReader(ACTUAL_COHERE_API_RESPONSE);
        Stream<CohereEvent> cohereStream = Stream.fromJson(CohereEvent.class, reader);

        List<CohereEvent> events = new ArrayList<>();
        StringBuilder fullText = new StringBuilder();

        for (CohereEvent event : cohereStream) {
            events.add(event);

            // Simulate real usage - accumulate text from text-generation events
            if ("text-generation".equals(event.event_type) && event.text != null) {
                fullText.append(event.text);
            }
        }

        // Verify actual Cohere API parsing
        assert events.size() == 7 : "Expected 7 events from Cohere API, got " + events.size();
        assert "stream-start".equals(events.get(0).event_type) : "First event should be stream-start";
        assert "stream-end".equals(events.get(6).event_type) : "Last event should be stream-end";
        assert "Cohere is a leading".equals(fullText.toString()) : "Accumulated text incorrect: " + fullText.toString();

        // Verify generation ID tracking
        assert events.get(0).generation_id != null : "Generation ID should be present in stream-start";
        assert events.get(0).generation_id.startsWith("cb40fd3c") : "Generation ID format incorrect";

        System.out.println(
                "âœ… Actual Cohere API format test passed - reconstructed text: '" + fullText.toString() + "'\n");
    }

    /**
     * Test SSE format parsing with standard Server-Sent Events format.
     * This tests the new SSE implementation with event:, id:, and data: fields.
     */
    private void testSSEFormat() {
        System.out.println("ðŸŒŠ Testing SSE format parsing...");

        StringReader reader = new StringReader(SSE_TEST_DATA);
        URI dummyUri = URI.create("https://api.cohere.ai/v1/chat-stream");
        Stream<CohereEvent> sseStream = Stream.fromSSE(CohereEvent.class, dummyUri, reader);

        List<CohereEvent> events = new ArrayList<>();
        StringBuilder fullText = new StringBuilder();

        for (CohereEvent event : sseStream) {
            events.add(event);

            // Simulate real usage - accumulate text from text-generation events
            if ("text-generation".equals(event.event_type) && event.text != null) {
                fullText.append(event.text);
            }
        }

        // Verify SSE parsing
        assert events.size() == 4 : "Expected 4 events from SSE stream, got " + events.size();
        assert "stream-start".equals(events.get(0).event_type) : "First event should be stream-start";
        assert "stream-end".equals(events.get(3).event_type) : "Last event should be stream-end";
        assert "Hello World".equals(fullText.toString()) : "Accumulated text incorrect: " + fullText.toString();

        // Verify event ID tracking
        assert sseStream.getLastEventId() != null : "Last event ID should be tracked";
        assert sseStream.getLastEventId().equals("event-4") : "Last event ID should be event-4";

        System.out.println("âœ… SSE format test passed - reconstructed text: '" + fullText.toString() + "'\n");
    }

    /**
     * Test resource management and cleanup.
     * This ensures streams can be properly closed and resources released.
     */
    private void testResourceManagement() {
        System.out.println("ðŸ§¹ Testing resource management...");

        StringReader reader = new StringReader(SIMPLE_JSON_DATA);
        Stream<TestEvent> stream = Stream.fromJson(TestEvent.class, reader);

        // Verify stream is not initially closed
        assert !stream.isClosed() : "Stream should not be closed initially";

        // Use the stream
        Iterator<TestEvent> iterator = stream.iterator();
        assert iterator.hasNext() : "Iterator should have next element";
        TestEvent firstEvent = iterator.next();
        assert firstEvent != null : "First event should not be null";

        // Close the stream
        try {
            stream.close();
            assert stream.isClosed() : "Stream should be closed after close() call";
        } catch (IOException e) {
            throw new RuntimeException("Failed to close stream", e);
        }

        System.out.println("âœ… Resource management test passed\n");
    }

    /**
     * Information about the new SSE factory method using manual parsing.
     * This explains how to use SSE streaming with Cohere endpoints.
     */
    private void testSSEInfo() {
        System.out.println("ðŸŒŠ Stream.java with manual SSE implementation...");

        System.out.println("ðŸ“‹ Currently implemented:");
        System.out.println("   âœ… Stream.fromJson(Class<T>, Reader) - Newline-delimited JSON (NDJSON)");
        System.out.println("   âœ… Stream.fromJson(Class<T>, Reader, String) - Custom delimiter JSON");
        System.out.println("   âœ… Stream.fromSSE(Class<T>, URI, Reader) - Manual SSE parsing");
        System.out.println("   âœ… Backward compatibility with legacy constructor");
        System.out.println("   âœ… Resource management with close() and isClosed()");
        System.out.println("   âœ… getLastEventId() for SSE event ID tracking");

        System.out.println("\nðŸ“‹ SSE Implementation Features:");
        System.out.println("   âœ… Manual SSE parsing (event:, id:, data: fields)");
        System.out.println("   âœ… Proper SSE event format handling");
        System.out.println("   âœ… Event ID tracking for reconnection support");
        System.out.println("   âœ… W3C-compliant SSE format support");
        System.out.println("   âœ… Example usage:");
        System.out.println("     URI uri = URI.create(\"https://api.cohere.ai/v1/chat-stream\");");
        System.out.println("     Reader sseReader = getSSEReader(); // From HTTP response or test data");
        System.out.println("     Stream<ChatEvent> stream = Stream.fromSSE(ChatEvent.class, uri, sseReader);");
        System.out.println("     for (ChatEvent event : stream) { processEvent(event); }");
        System.out.println("     String lastId = stream.getLastEventId(); // For reconnection");
        System.out.println("     stream.close(); // Clean up resources");

        System.out.println("\nâœ… Manual SSE implementation complete\n");
    }

    /**
     * Simple test event class for basic testing
     */
    public static class TestEvent {
        public String message;

        public TestEvent() {} // Default constructor for Jackson

        @Override
        public String toString() {
            return "TestEvent{message='" + message + "'}";
        }
    }

    /**
     * Cohere-specific event class matching actual API response structure
     */
    public static class CohereEvent {
        public boolean is_finished;
        public String event_type;
        public String generation_id;
        public String text;
        public String finish_reason;

        public CohereEvent() {} // Default constructor for Jackson

        @Override
        public String toString() {
            return String.format(
                    "CohereEvent{event_type='%s', text='%s', is_finished=%s}", event_type, text, is_finished);
        }
    }
}
